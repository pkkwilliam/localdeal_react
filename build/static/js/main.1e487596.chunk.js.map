{"version":3,"sources":["common/middleware/service.ts","common/redux/action.ts","common/middleware/serviceExecutor.ts","common/transformer.ts","common/appContext.ts","common/applicationComponent.tsx","common/addressDisplay.tsx","common/stylesheet.ts","common/h4.tsx","common/h5.tsx","common/localDealCard.tsx","common/localDealTextField.tsx","common/richTextEditor.tsx","common/twinButton.tsx","common/view.tsx","component/createDealLandingPage/createDealLandingPage.view.tsx","component/createDealLandingPage/createDealLandingPage.tsx","component/addressPrediction/addressPrediction.tsx","component/addressPrediction/addressPrediction.view.tsx","component/landingPage/landingPage.view.tsx","component/landingPage/landingPage.tsx","common/redux/reducers.ts","common/redux/store.ts","component/header/header.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["ServiceName","ReduxActopnTypes","CREATE_DEAL","deal","body","JSON","stringify","hasMock","isMultipartFileRequest","method","url","serviceName","GET_DEALS","address","optionalRequestParam","generateParameter","area","UPLOAD_IMAGE","image","generateCurrentAreaRequestParameter","currentArea","console","debug","areaName","coordinate","latitude","longitude","warn","key","value","ServiceExecutor","isMock","serviceUrl","headers","generateHeaders","endpoint","this","Promise","resolve","getResponse","requestParam","requestUrl","fetch","mode","then","result","status","json","catch","exception","reject","response","parse","ex","GET_DEALS_RESPONSE","GET_CURRENT_ADDRESS","GET_POSITION_RESPONSE","deals","id","street1","street2","city","state","zipCode","country","description","title","timestamp","formattedAddress","Transformer","_lables","currentDate","Date","dateCreated","timeDifference","getTime","getLabelAccrodingToTimeDifference","date","unknown","dayDifferent","Math","round","HOUR","day","today","callBack","navigator","geolocation","getCurrentPosition","position","coords","AppContext","ALLOW_DEAL_REFRESH","DEAL_REFRESH_TIME","APIKEY","X_MADT_APPID","X_MADT_APP_VERSION","_serviceExecutor","_transformer","labels","isAllowDealRefresh","XMADTAPPID","XMADTAPPVERSION","chineseTraditionalLabel","isProd","ApplicationComponent","_appContext","Component","AddressDisplay","isFlexDirectionRow","generateAddressWithSpace","props","input","styleSchema","button","borderRadius","color","primaryColor","secondaryColor","font","fontSize","white","remind","textField","borderColor","borderWidth","H4","style","styles","textStyle","children","margin","H5","text","LocalDealCard","onClickedContent","setState","isCollapsed","collapsedHeight","contents","Collapse","in","Card","cardContainer","CardContent","onClick","marginLeft","marginRight","marginBottom","marginTop","textFieldStyle","height","width","LocalDealTextField","onBlurFunction","onBlur","onFocusFunction","onFocus","TextField","InputProps","classes","notchedOutline","label","onChange","target","defaultValue","variant","withStyles","textFieldStyles","overrideStyles","richTextEditorOptions","header","align","list","background","RichTextEditor","quillRef","imageHandlerTest","document","createElement","setAttribute","click","onchange","a","async","files","file","formData","FormData","append","range","getSelection","formatLine","index","formatText","appContext","serviceExecutor","execute","imageUrl","deleteText","insertEmbed","resizeImage","setSelection","ref","getEditor","modules","getModules","onChangeValue","toolbar","container","handlers","resizeValue","getImageResizeValue","Image","src","onload","TwinButton","onClickPrimaryButton","onClickSecondaryButton","primaryButtonLabel","secondaryButtonLabel","rootContainer","Button","alignItem","View","Box","display","flexDirection","alignItems","justifyContent","CreateDealLandingPageView","AddressSection","useAutoPosition","AddressAutoPositionDisplay","AddressTextField","currentAddress","ButtonSection","createDealPage","onClickSubmit","onClickClose","create","cancel","DescriptionTextField","onChangeRichTextValue","HeaderSection","headerContainer","headerText","close","HourOfOperationSection","TitleTextField","onChangeTitleTextField","textFieldTitle","setDeals","getDealsResponse","dispatch","type","SET_DEALS","payload","CreateDealLandingPage","richTextValue","generateDeal","getDealResponse","connect","selectedAddress","AddressPrediction","onSelectAddress","addressPrediction","setSelectedAddress","setDefaultSelectedAddress","isPositionLoading","length","addressesPrediction","isLoadingPosition","SET_SELECTED_ADDRESS","AddressPredictionView","AddressPredictionSection","addressPredictionOptions","map","FormControl","InputLabel","NativeSelect","event","selectedIndex","GetValue","name","PositionLoading","loading","LandingPageView","BodySection","CreateDealSection","DealsSection","Drawer","anchor","open","isCreateDealDrawerOpen","onClose","onCloseCreateDeal","CreateNewDealButton","createNewButton","onClickCreateDeal","landingPage","createDealButton","dealsCard","generateCardContent","onClickCard","onClickDealSection","dealSectionContainer","NoDealInArea","LocationButton","disabled","useAutoLocation","onClickLocationButton","searchMethodLabel","geolocationProvider","noDeal","SearchButton","showSearchButton","onClickSearch","searchButton","TextFieldArea","textFieldValue","onBlurTextField","onChangeSearchTextField","onFocusTextField","TopBarSection","topBarContainer","category","discussions","timeAvailable","vote","transformer","timeDifferentCalcualtor","dangerouslySetInnerHTML","__html","backgroundColor","paddingBottom","paddingTop","manual","LandingPage","log","onClickedCard","onClickedDealSection","setCurrentPosition","setCurrentAddress","getCurrentLocation","setGeolocation","addresses","setAddressPrediction","setLoadingPosition","inputDeals","sort","deal1","deal2","sortDeals","SET_ADDRESS_PREDICTION","SET_GEOLOCATION","disptach","SET_LOADING_POSITION","initialState","setPosition","middleWare","thunk","store","createStore","action","applyMiddleware","Header","className","App","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"g8BAOYA,E,uHAAAA,K,0BAAAA,E,sBAAAA,E,0CAAAA,E,6BAAAA,M,KAOL,ICXKC,EDWCC,EAAc,SAACC,GAC1B,MAAO,CACLC,KAAMC,KAAKC,UAAUH,GACrBI,SAAS,EACTC,wBAAwB,EACxBC,OAAQ,OACRC,IAAK,SACLC,YAAaX,EAAYE,cAgBhBU,EAAY,SAACC,GACxB,MAAO,CACLN,SAAS,EACTC,wBAAwB,EACxBC,OAAQ,MACRC,IAAK,SACLI,qBAAsB,4BAChBC,EAzC8B,WAyCaF,EAAQG,MAAQ,MACjEL,YAAaX,EAAYY,YAIhBK,EAAe,SAACC,GAC3B,MAAO,CACLd,KAAMc,EACNX,SAAS,EACTC,wBAAwB,EACxBC,OAAQ,OACRC,IAAK,SACLC,YAAaX,EAAYiB,eAIvBE,EAAsC,SAC1CC,GAMA,OAJAC,QAAQC,MACN,oDACAF,GAEEA,EAAYG,SACR,IAAN,OAAWR,EAjEyB,WAmElCK,EAAYG,WAELH,EAAYI,WACf,IAAN,OArEmC,WAqEnC,YAAqCJ,EAAYI,WAAWC,SAA5D,YApEoC,YAoEpC,YAAmGL,EAAYI,WAAWE,YAE1HL,QAAQM,KAAK,sCACN,KAILZ,EAAoB,SAACa,EAAaC,GACtC,MAAM,GAAN,OAAUD,EAAV,YAAiBC,IE9EEC,E,WACnB,WACmBC,EACAC,EACAC,GAChB,IAAD,gCAHiBF,SAGjB,KAFiBC,aAEjB,KADiBC,UACjB,KA6CQC,gBAAkB,SAAC1B,GAC3B,OAAQA,EAAD,eAKE,EAAKyB,SALP,eAEE,EAAKA,QAFP,CAGD,eAAgB,sB,oDA/CHE,G,gFACfC,KAAKL,SAAUI,EAAS5B,Q,yCACnB8B,QAAQC,QAAQC,EAAYJ,EAASxB,e,cAExCsB,EAAUG,KAAKF,gBAAgBC,EAAS3B,wBACxCgC,EAAuBL,EAASrB,qBAChCqB,EAASrB,uBACT,GACA2B,EAAaL,KAAKJ,WAAaG,EAASzB,IAAM8B,E,kBAC3CE,MAAMD,EAAY,CACvBrC,KAAM+B,EAAS/B,KACf6B,UACAxB,OAAQ0B,EAAS1B,OACjBkC,KAAM,SAELC,MAAK,SAAAC,GACJ,OAAsB,MAAlBA,EAAOC,OACFT,QAAQC,UAERO,EAAOE,UAGjBH,MAAK,SAAAC,GAAM,OAAIR,QAAQC,QAAQO,MAC/BG,OAAM,SAAAC,GAML,OALA5B,QAAQM,KACN,mCACAc,EACAQ,GAEKZ,QAAQa,OAAOD,O,sFAKLE,GACvB,IAEE,OADA9C,KAAK+C,MAAMD,IACJ,EACP,MAAOE,GACP,OAAO,O,KAcPd,EAAc,SAAC5B,GACnB,OAAQA,GACN,KAAKX,EAAYY,UACf,OAAO0C,EACT,KAAKtD,EAAYuD,oBACf,OAAOC,EACT,QACE,OAAOnB,QAAQa,WAIfI,EAAsC,CAC1CG,MAAO,CACL,CACE5C,QAAS,CACP6C,GAAI,EACJC,QAAS,gBACTC,QAAS,sBACTC,KAAM,eACNC,MAAO,GACPC,QAAS,GACTC,QAAS,eACTxC,WAAY,CACVC,SAAU,IACVC,UAAW,MAGfuC,YACE,+EACFC,MAAO,wCACPC,UAAW,eAEb,CACEtD,QAAS,CACP6C,GAAI,EACJC,QAAS,gBACTC,QAAS,sBACTC,KAAM,eACNC,MAAO,GACPC,QAAS,GACTC,QAAS,eACTxC,WAAY,CACVC,SAAU,IACVC,UAAW,MAGfuC,YACE,4PACFC,MAAO,8CACPC,UAAW,eAEb,CACEtD,QAAS,CACP6C,GAAI,EACJC,QAAS,gBACTC,QAAS,sBACTC,KAAM,eACNC,MAAO,GACPC,QAAS,GACTC,QAAS,eACTxC,WAAY,CACVC,SAAU,IACVC,UAAW,MAGfuC,YACE,q4IACFC,MAAO,8CACPC,UAAW,iBAKXX,EAAmC,CACvC,CACEE,GAAI,EACJ1C,KAAM,eACNoD,iBAAkB,2EAClBJ,QAAS,gBAEX,CACEN,GAAI,EACJ1C,KAAM,eACNoD,iBAAkB,0CAClBJ,QAAS,gBAEX,CACEN,GAAI,EACJ1C,KAAM,eACNoD,iBAAkB,0CAClBJ,QAAS,gBAEX,CACEN,GAAI,EACJ1C,KAAM,eACNoD,iBAAkB,yCAClBJ,QAAS,gBAEX,CACEN,GAAI,EACJ1C,KAAM,eACNoD,iBAAkB,6CAClBP,KAAM,iCACNG,QAAS,gBAEX,CACEN,GAAI,EACJ1C,KAAM,eACNoD,iBAAkB,eAClBJ,QAAS,gBAEX,CACEN,GAAI,EACJ1C,KAAM,eACNoD,iBAAkB,eAClBJ,QAAS,iBCzKQK,E,WACnB,WAA6BC,GAAe,yBAAfA,U,oEACLH,GACtB,GAAIA,EAAW,CACb,IAAII,EAAoB,IAAIC,KACxBC,EAAoB,IAAID,KAAKL,GAC7BO,EACFH,EAAYI,UAAYF,EAAYE,UACtC,OAAOvC,KAAKwC,kCAAkCF,GAG9C,OADArD,QAAQM,KAAK,oBAAqBwC,GAC3B/B,KAAKkC,QAAQO,KAAKC,U,wDAIKJ,GAEhC,IAAMK,EAAeC,KAAKC,MAAMP,EAtBxBQ,OAuBR,OAAOH,EAAe,EAAf,UACAA,GADA,OACe3C,KAAKkC,QAAQO,KAAKM,KACpC/C,KAAKkC,QAAQO,KAAKO,Q,yCAGLC,GACjBC,UAAUC,YAAYC,oBAAmB,SAACC,GAAwB,IAAD,EACjCA,EAASC,OAAjCjE,EADyD,EACzDA,SAAUC,EAD+C,EAC/CA,UAKhB2D,EAJkC,CAChC5D,WACAC,qB,cCjCaiE,E,iDAEXC,oBAA8B,E,KACrBC,kBAA4B,I,KAG5BC,OAAS,iC,KACTC,aAAuB,Y,KACvBC,mBAA6B,Q,KAE7BC,iBAAoC,IAAInE,EACvDM,KAAKL,OACLK,KAAKJ,WACLI,KAAKH,S,KAGUiE,aAA4B,IAAI7B,EAAYjC,KAAK+D,Q,6DAGhE,OAAO/D,KAAKwD,oB,aAGOQ,GACnBhE,KAAKwD,mBAAqBQ,I,sCAI1B,OAAOhE,KAAKyD,oB,8BAKZ,MAAO,CACLC,OAFiD1D,KAA7C0D,OAGJO,WAHiDjE,KAArC2D,aAIZO,gBAJiDlE,KAAvB4D,sB,6BAS5B,OAAOO,I,6BAIP,OAAO,I,6BAIP,OAAO,I,sCAIP,OAAOnE,KAAK6D,mB,iCAKZ,OAAO7D,KAAKoE,OAAS,0BAA4B,0B,kCAIjD,OAAOpE,KAAK8D,iB,KC7DKO,E,2MAIFC,YAA0B,IAAIf,E,0EAG7C,OAAOvD,KAAKsE,gB,GAJNC,aCEWC,E,iLAEjB,OACE,kBAAC,GAAD,CAAMC,oBAAoB,GACxB,kBAAC,EAAD,KAAKzE,KAAK0E,yBAAyB1E,KAAK2E,MAAMlG,a,+CAKjBA,GACyBA,EAApD8C,QAAoD9C,EAA3C+C,QAA2C/C,EAAlCgD,KAAkChD,EAA5BiD,MAA4BjD,EAArBkD,QAAqBlD,EAAZmD,QAQ9C,OAAOnD,EAAQuD,kBAAoB,K,4CAGL4C,GAC9B,OAAOA,EAAK,UAAMA,EAAN,KAAiB,O,GAtBWP,GC0B/BQ,EAA0B,CACrCC,OAAQ,CACNC,aApCiB,IAsCnBC,MAAO,CACLC,aApCS,UAqCTC,eAnCe,WAqCjBC,KAAM,CACJC,SAlCc,GAmCdC,MAtCU,WAwCZC,OAAQ,CACNL,aA3CU,UA4CVC,eA7CS,WA+CXK,UAAW,CACTC,YAhDS,UAiDTT,aApDiB,GAqDjBU,YAAa,IChDIC,E,iLAEjB,OACE,wBAAIC,MAAO3F,KAAK2E,MAAMgB,MAAQ3F,KAAK2E,MAAMgB,MAAQC,EAAOC,WACrD7F,KAAK2E,MAAMmB,c,GAJYvB,aAU1BqB,EAAS,CACbC,UAAW,CACTE,OAAQ,ICVSC,E,iLAEjB,IAAIhB,EAAQ,CACVA,MAAOhF,KAAK2E,MAAMK,MACdhF,KAAK2E,MAAMK,MACXH,EAAYG,MAAME,gBAExB,OAAO,wBAAIS,MAAK,eAAOC,EAAOK,KAAd,GAAuBjB,IAAUhF,KAAK2E,MAAMmB,c,GAPhCvB,aAW1BqB,EAAS,CACbK,KAAM,CACJF,OAAQ,I,2BCNSG,E,YACnB,WAAYvB,GAAe,IAAD,8BACxB,4CAAMA,KAsBRwB,iBAAmB,WACjB,EAAKC,SAAS,CACZC,aAAc,EAAK3E,MAAM2E,eAvB3B,EAAK3E,MAAQ,CACX2E,aAAa,GAHS,E,sEAOhB,IAAD,SAC6BrG,KAAK2E,MAAnC2B,EADC,EACDA,gBAAiBC,EADhB,EACgBA,SACvB,OACE,kBAACC,EAAA,EAAD,CACEC,GAAIzG,KAAK0B,MAAM2E,YACfC,gBAAiBA,GAAoC,KAErD,kBAACI,EAAA,EAAD,CAAMf,MAAOC,EAAOe,eAClB,kBAACC,EAAA,EAAD,CAAaC,QAAS,kBAAM,EAAKV,qBAC9BI,S,GAjB8BhC,aA+BrCqB,EAAS,CACbe,cAAe,CACbG,WAAY,EACZC,YAAa,EACbC,aAAc,EACdC,UAAW,I,gBCjCTrB,EAAS,CACbsB,eAAgB,CACdC,OAAQ,OACRL,WAAY,GACZC,YAAa,GACbK,MAAO,QAcLC,E,iLACM,IAAD,OACHC,EAAiBtH,KAAK2E,MAAM4C,OAASvH,KAAK2E,MAAM4C,OAAS,aACzDC,EAAkBxH,KAAK2E,MAAM8C,QAAUzH,KAAK2E,MAAM8C,QAAU,aAChE,OACE,kBAACC,EAAA,EAAD,CACEC,WAAY,CACVC,QAAS,CACPC,eAAgB7H,KAAK2E,MAAMiD,QAAQC,iBAGvCC,MAAO9H,KAAK2E,MAAMsB,KAClBsB,OAAQ,kBAAMD,KACdS,SAAU,SAAA9B,GAAI,OAAI,EAAKtB,MAAMoD,SAAS9B,EAAK+B,OAAOvI,QAClDgI,QAAS,kBAAMD,KACf7B,MAAOC,EAAOsB,eACde,aAAcjI,KAAK2E,MAAMsD,aACzBC,QAAQ,YAEPlI,KAAK2E,MAAMmB,c,GAnBazB,GAyBlB8D,cAvDQ,SAACxC,GACtB,IAAIyC,EAAkBzC,EAAMJ,UAC5B,MAAO,CACLsC,eAAgB,CACdrC,YAAa4C,EAAgB5C,YAC7BT,aAAcqD,EAAgBrD,aAC9BU,YAAa2C,EAAgB3C,cAiDT4C,CAAexD,GAA1BsD,CAAwCd,G,kBCtDjDiB,G,OAAwB,CAC5B,CACE,OACA,SACA,YACA,SACA,CAAEC,OAAQ,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAAG,IAC7B,CAAEC,MAAO,KAGX,CAAC,SACD,CAAC,QAED,CAAC,CAAEC,KAAM,WAAa,CAAEA,KAAM,WAM9B,CAAC,CAAEzD,MAAO,IAAM,CAAE0D,WAAY,KAE9B,CAAC,WAWkBC,E,2MACXC,c,IA4BRC,iBAAmB,WACjB,IAAMjE,EAAQkE,SAASC,cAAc,SACrCnE,EAAMoE,aAAa,OAAQ,QAC3BpE,EAAMoE,aAAa,SAAU,WAC7BpE,EAAMqE,QACNrE,EAAMsE,SAAW,8BAAAC,EAAAC,OAAA,gDACXxE,EAAMyE,QACFC,EAAO1E,EAAMyE,MAAM,IACnBE,EAAW,IAAIC,UACZC,OAAO,QAASH,EAAM,SAGzBI,EAAQ,EAAKd,SAASe,cAAa,GAGzC,EAAKf,SAASgB,WAAWF,EAAMG,MAAO,EAAG,QAAS,UAClD,EAAKjB,SAASkB,WAAWJ,EAAMG,MAAO,EAAG,CACvCrB,MAAO,SACPpB,MAAO,IACPD,OAAQ,MAIV,EAAK4C,WAAWC,gBACbC,QAAQpL,EAAa0K,IACrB/I,MAAK,SAAAC,GACJ,IAAIyJ,EAAmBzJ,EAAOnC,IAC9B,EAAKsK,SAASuB,WAAWT,EAAMG,MAAO,GACtC,EAAKjB,SAASwB,YAAYV,EAAMG,MAAO,QAASK,GAChD,EAAKG,YAAYH,GAAU1J,MAAK,YAAwB,IAArB2G,EAAoB,EAApBA,OAAQC,EAAY,EAAZA,MACzC,EAAKwB,SAASkB,WAAWJ,EAAMG,MAAO,EAAG,CACvC1C,SACAC,UAEF,EAAKwB,SAAS0B,aAAaZ,EAAMG,MAAQ,UA7BlC,uC,wEA/BT,IAAD,OACP,OACE,kBAAC,IAAD,CACEU,IAAK,SAAAA,GAAG,OAAK,EAAK3B,SAAL,OAAgB2B,QAAhB,IAAgBA,OAAhB,EAAgBA,EAAKC,aAClCC,QAASzK,KAAK0K,aACd3C,SAAU,SAAAtI,GAAK,OAAI,EAAKkF,MAAMgG,cAAclL,Q,mCAMhD,MAAO,CACLmL,QAAS,CACPC,UAAWvC,EACXwC,SAAU,CACRhM,MAAOkB,KAAK6I,sB,4CAqDlB,MAzGoC,K,kCA6GpCvK,G,sGAEO,IAAI2B,SAAQ,SAACC,EAASY,GAC3B,IAAIiK,EAAsB,EAAKC,sBAC3BlM,EAAQ,IAAImM,MAChBnM,EAAMoM,IAAM5M,EACZQ,EAAMqM,OAAS,kBACbjL,EAAQ,CACNiH,OAAQrI,EAAMqI,OAAS4D,EACvB3D,MAAOtI,EAAMsI,MAAQ2D,S,4CApFa1G,G,SC5BvB+G,E,iLACT,IAAD,EAMHpL,KAAK2E,MAJP0G,EAFK,EAELA,qBACAC,EAHK,EAGLA,uBACAC,EAJK,EAILA,mBACAC,EALK,EAKLA,qBAEF,OACE,kBAAC,GAAD,CAAM/G,oBAAoB,EAAMkB,MAAOC,EAAO6F,eAC5C,kBAACC,EAAA,EAAD,CAAQ7E,QAAS,kBAAMwE,KAAwBnD,QAAS,YACtD,kBAAC,EAAD,KAAKqD,IAEP,kBAACG,EAAA,EAAD,CAAQ7E,QAAS,kBAAMyE,KAA0BpD,QAAS,YACxD,kBAAC,EAAD,KAAKsD,S,GAdyBnH,GAqBlCuB,EAAS,CACb6F,cAAe,CACbE,UAAW,kB,SCtBMC,G,iLACT,IAAD,OACP,OACE,kBAACC,EAAA,EAAD,CACEC,QAAQ,OACRC,cAAe/L,KAAK2E,MAAMF,mBAAqB,MAAQ,SACvDuH,WAAYhM,KAAK2E,MAAMqH,WAAahM,KAAK2E,MAAMqH,WAAa,QAC5DC,eACEjM,KAAK2E,MAAMsH,eAAiBjM,KAAK2E,MAAMsH,eAAiB,QAE1DpF,QAAS,kBAAO,EAAKlC,MAAMkC,QAAU,EAAKlC,MAAMkC,UAAY,IAC5DlB,MAAO3F,KAAK2E,MAAMgB,OAEjB3F,KAAK2E,MAAMmB,c,GAbczB,G,UCUb6H,G,kNAgBnBC,eAAiB,WACf,OACE,kBAAC,GAAD,CAAMxG,MAAO,CAAEI,OAAQ,KACpB,EAAKpB,MAAMyH,gBACV,kBAAC,EAAKC,2BAAN,MAEA,kBAAC,EAAKC,iBAAN,Q,EAMRD,2BAA6B,WAC3B,OAAO,kBAAC,EAAD,CAAgB5N,QAAS,EAAKkG,MAAM4H,kB,EAG7CD,iBAAmB,WACjB,OAAO,M,EAGTE,cAAgB,WACd,IAAI1E,EAAQ,EAAKiC,WAAWhG,OAAO0I,eACnC,OACE,kBAAC,EAAD,CACEpB,qBAAsB,kBAAM,EAAK1G,MAAM+H,iBACvCpB,uBAAwB,kBAAM,EAAK3G,MAAMgI,gBACzCpB,mBAAoBzD,EAAM8E,OAC1BpB,qBAAsB1D,EAAM+E,U,EAKlCC,qBAAuB,WACrB,OAAO,kBAAC,EAAD,CAAgBnC,cAAe,EAAKhG,MAAMoI,yB,EAGnDC,cAAgB,WACd,IAAIlF,EAAQ,EAAKiC,WAAWhG,OAAO0I,eACnC,OACE,kBAAC,GAAD,CAAM9G,MAAOC,GAAOqH,gBAAiBxI,oBAAoB,GACvD,kBAAC,EAAD,CAAIkB,MAAOC,GAAOsH,YAAapF,EAAMS,QACrC,kBAACmD,EAAA,EAAD,CAAQ7E,QAAS,kBAAM,EAAKlC,MAAMgI,iBAChC,kBAAC,EAAD,KAAK7E,EAAMqF,U,EAMnBC,uBAAyB,WACvB,OAAO,M,EAGTC,eAAiB,WACf,OACE,kBAAC,EAAD,CACEtF,SAAU,EAAKpD,MAAM2I,uBACrBrH,KAAM,EAAK8D,WAAWhG,OAAO0I,eAAec,kB,wEApEhD,OACE,kBAAC,GAAD,CAAM5H,MAAOC,GAAO6F,eAClB,uBAAMuB,cAAN,MACA,uBAAMb,eAAN,MACA,uBAAMkB,eAAN,MACA,uBAAMD,uBAAN,MACA,uBAAMN,qBAAN,MACA,uBAAMN,cAAN,W,GAX+CnI,GA8EjDuB,GAAS,CACbqH,gBAAiB,CACfhB,eAAgB,gBAChB7E,MAAO,OAET8F,WAAY,CACVjG,UAAW,IAEbwE,cAAe,CACbO,WAAY,SACZC,eAAgB,SAChBnF,WAAY,GACZC,YAAa,M,Sd9GLlJ,K,gDAAAA,E,qBAAAA,E,4CAAAA,E,kCAAAA,E,6CAAAA,M,KAQL,IA2BM2P,GAAW,SAACC,GACvB,OAAO,SAASC,GACdA,EAAS,CACPC,KAAM9P,EAAiB+P,UACvBC,QAASJ,M,SerBFK,GAAb,YACE,WAAYnJ,GAAe,IAAD,8BACxB,4CAAMA,KAqBEoI,sBAAwB,SAACgB,GACjC,EAAK3H,SAAS,CACZ2H,mBAxBsB,EA4BhBT,uBAAyB,SAACxL,GAClC,EAAKsE,SAAS,CACZtE,WA9BsB,EAkChB4K,cAAgB,oBAAAvD,EAAAC,OAAA,kEAAAD,EAAA,MAClB,EAAKY,WAAWC,gBAAgBC,QACpCnM,EAAY,EAAKkQ,kBAFK,cAIxB,EAAKrJ,MAAMgI,eAJa,WAAAxD,EAAA,MAKlB,EAAKY,WAAWC,gBACnBC,QAAQzL,EAAU,EAAKmG,MAAM4H,iBAC7B/L,MAAK,SAACyN,GAAD,OACJ,EAAKtJ,MAAM6I,SAASS,OARA,sCAhCxB,EAAKvM,MAAQ,CACXqM,cAAe,GACfjM,MAAO,GACPsK,iBAAiB,GALK,EAD5B,sEAUY,IAAD,OACP,OACE,kBAAC,GAAD,CACEG,eAAgBvM,KAAK2E,MAAM4H,eAC3BQ,sBAAuB/M,KAAK+M,sBAC5BO,uBAAwBtN,KAAKsN,uBAC7BX,aAAc,kBAAM,EAAKhI,MAAMgI,gBAC/BD,cAAe1M,KAAK0M,cACpBN,gBAAiBpM,KAAK0B,MAAM0K,oBAlBpC,qCAgDI,MAAO,CACL3N,QAASuB,KAAK2E,MAAM4H,eACpB1K,YAAa7B,KAAK0B,MAAMqM,cACxBhM,UAAW,EACXD,MAAO9B,KAAK0B,MAAMI,WApDxB,GAA2CuC,GA6D5B6J,iBAJS,SAACxM,GAAD,MAAwB,CAC9C6K,eAAgB7K,EAAMyM,mBAGgB,CAAEX,aAA3BU,CAAuCJ,ICjEzCM,GAAb,2MAqBYC,gBAAkB,WAAwB,IAAvBxE,EAAsB,uDAAN,EAC3C,GAAI,EAAKlF,MAAM2J,kBAAmB,CAChC,IAAMH,EAA2B,EAAKxJ,MAAM2J,kBAAkBzE,GAC9D,EAAKlF,MAAM4J,mBAAmBJ,GAC9B,EAAKX,SAASW,KAzBpB,wEAGI,OADAnO,KAAKwO,4BAEH,kBAAC,GAAD,CACEF,kBAAmBtO,KAAK2E,MAAM2J,kBAC9BG,kBAAmBzO,KAAK2E,MAAM8J,kBAC9BJ,gBAAiBrO,KAAKqO,oBAP9B,kDAcMrO,KAAK2E,MAAM2J,kBAAkBI,OAAS,IACrC1O,KAAK2E,MAAMwJ,gBAAgBvP,MAE5BoB,KAAKqO,oBAjBX,+BA6BqBF,GAA2B,IAAD,SACvCA,EAAgBvP,QAAhB,UAAyBoB,KAAK2E,MAAMwJ,uBAApC,aAAyB,EAA4BvP,OACvDoB,KAAK+J,WAAWC,gBACbC,QAAQzL,EAAU2P,IAClB3N,MAAK,SAACyN,GACL,EAAKtJ,MAAM6I,SAASS,UAlC9B,GAAuC5J,GA8CxB6J,iBANS,SAACxM,GAAD,MAA+B,CACrD4M,kBAAmB5M,EAAMiN,oBACzBF,kBAAmB/M,EAAMkN,kBACzBT,gBAAiBzM,EAAMyM,mBAGe,CAAEX,YAAUe,mBhBhBlB,SAAC9P,GACjC,OAAO,SAASiP,GACdA,EAAS,CACPC,KAAM9P,EAAiBgR,qBACvBhB,QAASpP,OgBYAyP,CACbE,I,8BCpDmBU,G,2MAanBC,yBAA2B,WACzB,IAGIC,GAH+B,EAAKrK,MAAM2J,kBAC1C,EAAK3J,MAAM2J,kBACX,IAC6CW,KAAI,SAAAxQ,GACnD,OAAO,gCAASA,EAAQuD,qBAE1B,OACE,kBAACkN,GAAA,EAAD,KACE,kBAACC,GAAA,EAAD,KAAa,EAAKpF,WAAWhG,OAAOV,SAASrE,aAC7C,kBAACoQ,GAAA,EAAD,CACErH,SAAU,SAAAsH,GAAK,OACb,EAAK1K,MAAM0J,gBAAgBgB,EAAMrH,OAAOsH,iBAGzCN,K,EAMTO,SAAW,SAACC,GAAD,OAAe,SAACH,M,EAE3BI,gBAAkB,WAChB,OAAO,kBAAC,EAAD,KAAK,EAAK1F,WAAWhG,OAAOV,SAASqM,U,wEAnC5C,OACE,kBAAC,GAAD,CAAM/J,MAAOC,GAAO6F,eACjBzL,KAAK2E,MAAM8J,kBACV,uBAAMgB,gBAAN,MAEA,uBAAMV,yBAAN,W,GAPyC1K,GAyC7CuB,GAAS,CACb6F,cAAe,CACbxE,UAAW,GACXG,MAAO,SCtBUuI,G,kNAWnBC,YAAc,WACZ,OACE,oCACE,kBAAC,EAAKC,kBAAN,MACA,kBAAC,EAAKC,aAAN,Q,EAKND,kBAAoB,WAClB,OACE,kBAACE,GAAA,EAAD,CACEC,OAAQ,MACRC,KAAM,EAAKtL,MAAMuL,uBACjBC,QAAS,kBAAM,EAAKxL,MAAMyL,sBAE1B,kBAAC,GAAD,CAAuBzD,aAAc,EAAKhI,MAAMyL,sB,EAKtDC,oBAAsB,WACpB,OACE,kBAAC3E,EAAA,EAAD,CACE/F,MAAOC,GAAO0K,gBACdzJ,QAAS,kBAAM,EAAKlC,MAAM4L,qBAC1BrI,QAAQ,YAER,kBAAC,EAAD,KAAK,EAAK6B,WAAWhG,OAAOyM,YAAYC,oB,EAK9CX,aAAe,WACb,IACIY,GADe,EAAK/L,MAAMtD,MAAQ,EAAKsD,MAAMtD,MAAQ,IAC5B4N,KAAI,SAAAlR,GAC/B,OACE,kBAAC,EAAD,CACEwI,SAAU,EAAKoK,oBAAoB5S,GACnC8I,QAAS,kBAAM,EAAKlC,MAAMiM,eAC1B9O,MAAO/D,EAAK+D,WAIlB,OACE,kBAAC+J,EAAA,EAAD,CACEhF,QAAS,kBAAM,EAAKlC,MAAMkM,sBAC1BlL,MAAOC,GAAOkL,sBAEbJ,EAAUhC,OAASgC,EAAY,kBAAC,EAAKK,aAAN,Q,EAKtCC,eAAiB,WAOf,OACE,kBAACtF,EAAA,EAAD,CACEuF,SAAU,EAAKtM,MAAMuM,gBACrBrK,QAAS,kBAAM,EAAKlC,MAAMwM,yBAC1BxL,MAAOC,GAAOwL,kBAAkBhS,WAChC8I,QAAQ,YAER,kBAAC,GAAD,CAAMzD,oBAAoB,GACxB,kBAAC,EAAD,CAAIO,MAAOH,EAAYM,KAAKE,OACzB,EAAK0E,WAAWhG,OAAOyM,YAAYa,oBAClC,KACA,EAAK1M,MAAMwJ,gBAAgBvP,S,EAOvCmS,aAAe,WACb,OAAO,2BAAI,EAAKhH,WAAWhG,OAAOyM,YAAYc,S,EAGhDC,aAAe,WACb,OAAO,EAAK5M,MAAM6M,iBAChB,kBAAC9F,EAAA,EAAD,CACE7E,QAAS,kBAAM,EAAKlC,MAAM8M,iBAC1B9L,MAAOC,GAAO8L,aACdxJ,QAAQ,YAER,kBAAC,EAAD,CAAIlD,MAAOH,EAAYM,KAAKE,OAAQ,8BAEpC,M,EAGNsM,cAAgB,WACd,OACE,kBAAC,EAAD,CACE1J,aAAc,EAAKtD,MAAMiN,eACzBrK,OAAQ,kBAAM,EAAK5C,MAAMkN,mBACzB9J,SAAU,SAAA9B,GAAI,OAAI,EAAKtB,MAAMmN,wBAAwB7L,IACrDwB,QAAS,kBAAM,EAAK9C,MAAMoN,oBAC1B9L,KAAM,EAAK8D,WAAWhG,OAAOyM,YAAY5R,Q,EAK/CoT,cAAgB,WACd,OACE,kBAAC,GAAD,CAAMvN,oBAAoB,EAAMkB,MAAOC,GAAOqM,iBAC5C,kBAAC,EAAKjB,eAAN,MAIA,kBAAC,EAAKX,oBAAN,Q,EAKIM,oBAAsB,SAAC5S,GAAiC,IAE9DU,EAQEV,EARFU,QAGAoD,GAKE9D,EAPFmU,SAOEnU,EANFoU,YAMEpU,EALF8D,aACAC,EAIE/D,EAJF+D,MAEAC,GAEEhE,EAHFqU,cAGErU,EAFFgE,WAEEhE,EADFsU,KAEF,OACE,oCACE,kBAAC,GAAD,CAAM5N,oBAAoB,EAAMkB,MAAOC,GAAOe,eAC5C,kBAAC,EAAD,KAAK7E,GACL,kBAAC,EAAD,KACGC,EACG,EAAKgI,WAAWuI,YAAYC,wBAAwBxQ,GACpD,8BAGR,kBAAC,GAAD,KACE,kBAAC,EAAD,CAAgBtD,QAASA,IACzB,yBAAK+T,wBAAyB,CAAEC,OAAQ5Q,Q,wEAvJ9C,OACE,kBAAC,GAAD,CAAM8D,MAAOC,GAAO6F,eAClB,uBAAMuG,cAAN,MACA,kBAAC,GAAD,MACA,uBAAMpC,YAAN,W,GANqCvL,GAgKvCuB,GAAS,CACbe,cAAe,CACbsF,eAAgB,iBAElBqE,gBAAiB,CACf9K,YAAaX,EAAYG,MAAME,eAC/BH,aAAcF,EAAYC,OAAOC,aACjCU,YAAa,GAEfqL,qBAAsB,CACpB7J,UAAW,GACXG,MAAO,QAETqE,cAAe,CACbO,WAAY,SACZC,eAAgB,SAChBnF,WAAY,GACZC,YAAa,IAEf2K,aAAc,CACZlM,YAAaX,EAAYS,OAAOJ,eAChCH,aAAcF,EAAYC,OAAOC,aACjC2N,gBAAiB7N,EAAYS,OAAOJ,eACpCO,YAAa,GAEf2L,kBAAmB,CACjBhS,WAAY,CACVoG,YAAaX,EAAYS,OAAOL,aAChCF,aAAcF,EAAYC,OAAOC,aACjC2N,gBAAiB7N,EAAYS,OAAOL,aACpCQ,YAAa,EACbkN,cAAe,EACfC,WAAY,GAEdC,OAAQ,CACNrN,YAAaX,EAAYS,OAAOJ,eAChCH,aAAcF,EAAYC,OAAOC,aACjC2N,gBAAiB7N,EAAYS,OAAOJ,eACpCO,YAAa,EACbkN,cAAe,EACfC,WAAY,IAGhBX,gBAAiB,CACfhG,eAAgB,gBAChBhF,UAAW,GACXG,MAAO,SC/ME0L,GAAb,YACE,WAAYnO,GAAe,IAAD,8BACxB,4CAAMA,KA6CEkN,gBAAkB,WAE1B5S,QAAQ8T,IAAI,oBAhDY,EAmDhBxC,kBAAoB,WAE5BtR,QAAQ8T,IAAI,qBACZ,EAAK3M,SAAS,CACZ8J,wBAAwB,KAvDF,EA2DhBE,kBAAoB,WAC5BnR,QAAQ8T,IAAI,qBACZ,EAAK3M,SAAS,CACZ8J,wBAAwB,KA9DF,EAkEhB8C,cAAgB,WAExB/T,QAAQ8T,IAAI,iBApEY,EAuEhBE,qBAAuB,WAE/BhU,QAAQ8T,IAAI,wBACZ,EAAK3M,SAAS,CACZoL,kBAAkB,KA3EI,EA+EhBL,sBAAwB,WAEhClS,QAAQ8T,IAAI,yBACZ,EAAK3M,SAAS,CACZ8K,iBAAiB,KAnFK,EAuFhBO,cAAgB,WAExBxS,QAAQ8T,IAAI,kBAzFY,EAkGhBjB,wBAA0B,SAACF,GAInC3S,QAAQ8T,IAAI,2BACZ,EAAK3M,SAAS,KAvGU,EA4GhB2L,iBAAmB,WAE3B9S,QAAQ8T,IAAI,oBACZ,EAAK3M,SAAS,CACZoL,kBAAkB,KA9GpB,EAAK9P,MAAQ,CACXwO,wBAAwB,EACxBsB,kBAAkB,EAClBI,eAAgB,GAChBV,iBAAiB,GANK,EAD5B,6KAYUlR,KAAKkT,sBAZf,iCAaUlT,KAAKmT,qBAbf,6KAiBQnT,KAAK+J,WAAWpK,OAjBxB,yCAkBaM,QAAQC,WAlBrB,gCAoBW,IAAID,SAAQ,SAACC,EAASY,GAC3B,EAAKiJ,WAAWuI,YAAYc,oBAC1B,SAAChU,GAGC,OAFAH,QAAQC,MAAM,uBAAwBE,GACtC,EAAKuF,MAAM0O,eAAejU,GACnBc,WAzBjB,iMAgCW,IAAID,SAAQ,SAACC,EAASY,GpBxCE,IAAC9B,EoByC9B,EAAK+K,WAAWC,gBACbC,SpB1C2BjL,EoB2CN,CAClBI,WAAY,EAAKuF,MAAMtB,SAASjE,YpB3CnC,CACLf,OAAQ,MACRF,SAAS,EACTC,wBAAwB,EACxBE,IAAK,YACLI,qBAAsB,kBACpBK,EAAoCC,IACtCT,YAAaX,EAAYuD,uBoBuCpBX,MAAK,SAAC8S,GAGL,OAFA,EAAK3O,MAAM4O,qBAAqBD,GAChC,EAAK3O,MAAM6O,oBAAmB,GACvBtT,WA1CjB,uEAqHsBuT,GAClBA,EAAWC,MAAK,SAACC,EAAOC,GACtB,OAAOA,EAAM7R,UAAY4R,EAAM5R,eAvHrC,+BA2HY,IAAD,EAMH/B,KAAK0B,MAJPwO,EAFK,EAELA,uBACAsB,EAHK,EAGLA,iBACAI,EAJK,EAILA,eACAV,EALK,EAKLA,gBAIF,OADAlR,KAAK6T,UAAU7T,KAAK2E,MAAMtD,OAExB,kBAAC,GAAD,CACEA,MAAOrB,KAAK2E,MAAMtD,MAClB6O,uBAAwBA,EACxB2B,gBAAiB7R,KAAK6R,gBACtBjB,YAAa5Q,KAAKgT,cAClBzC,kBAAmBvQ,KAAKuQ,kBACxBH,kBAAmBpQ,KAAKoQ,kBACxBS,mBAAoB7Q,KAAKiT,qBACzB9B,sBAAuBnR,KAAKmR,sBAC5BM,cAAezR,KAAKyR,cACpBK,wBAAyB9R,KAAK8R,wBAC9BC,iBAAkB/R,KAAK+R,iBACvB5D,gBAAiBnO,KAAK2E,MAAMwJ,gBAC5BqD,iBAAkBA,EAClBI,eAAgBA,EAChBV,gBAAiBA,QApJzB,GAAiC7M,GAiKlB6J,iBAPS,SAACxM,GAAD,MAA+B,CACrDiN,oBAAqBjN,EAAMiN,oBAC3BtN,MAAOK,EAAML,MACbgC,SAAU3B,EAAM2B,SAChB8K,gBAAiBzM,EAAMyM,mBAGe,CACtCoF,qBnBxLkC,SAACD,GACnC,OAAO,SAAS5F,GACdA,EAAS,CACPC,KAAM9P,EAAiBiW,uBACvBjG,QAASyF,MmBqLb9F,YACA6F,enBjL4B,SAACjU,GAC7B,OAAO,SAASsO,GACdA,EAAS,CACPC,KAAM9P,EAAiBkW,gBACvBlG,QAASzO,MmB8KboU,mBnBzKgC,SAAC5E,GACjC,OAAO,SAASoF,GACdA,EAAS,CACPrG,KAAM9P,EAAiBoW,qBACvBpG,QAASe,OmBiKAV,CAKZ4E,IC3LGoB,GAA2B,CAC/BvF,oBAAqB,GACrBtN,MAAO,GACPuN,mBAAmB,EACnBvL,SAAU,CACRlE,SAAU,GACVC,WAAY,CACVC,SAAU,EACVC,UAAW,IAGf6O,gBAAiB,CACfvP,KAAM,GACN2C,QAAS,GACTC,QAAS,GACTC,KAAM,GACNC,MAAO,GACPE,QAAS,GACTD,QAAS,KAsBP4R,GAAuB,SAC3B7R,EACAiN,GAEA,OAAO,eACFjN,EADL,CAEEiN,yBAIEnB,GAAW,SACf9L,EACA+L,GAEA,OAAO,eACF/L,EADL,CAEEL,MAAOoM,EAAiBpM,SAItBmS,GAAqB,SACzB9R,EACAkN,GAEA,OAAO,eACFlN,EADL,CAEEkN,uBAIEuF,GAAc,SAACzS,EAAmBtC,GACtC,OAAO,eACFsC,EADL,CAEE2B,SAAU,CACRjE,iBAKAmP,GAAqB,SACzB7M,EACAyM,GAEA,OAAO,eACFzM,EADL,CAEEyM,qB,SC5FEiG,GAAa,C,OAACC,GACPC,GAAQC,cD4BN,WAAyD,IAAhD7S,EAA+C,uDAA3BwS,GAAcM,EAAa,uCAErE,OADAvV,QAAQ8T,IAAI,QAASyB,EAAO7G,MACpB6G,EAAO7G,MACb,KAAK9P,EAAiBiW,uBACpB,OAAOP,GAAqB7R,EAAO8S,EAAO3G,SAC5C,KAAKhQ,EAAiB+P,UACpB,OAAOJ,GAAS9L,EAAO8S,EAAO3G,SAChC,KAAKhQ,EAAiBkW,gBACpB,OAAOI,GAAYzS,EAAO8S,EAAO3G,SACnC,KAAKhQ,EAAiBoW,qBACpB,OAAOT,GAAmB9R,EAAO8S,EAAO3G,SAC1C,KAAKhQ,EAAiBgR,qBACpB,OAAON,GAAmB7M,EAAO8S,EAAO3G,SAC1C,QACE,OAAOnM,KC1C8B+S,KAAe,WAAf,EAAmBL,KCFzCM,G,iLAEjB,OACE,4BAAQC,UAAU,cAChB,2BAAI3U,KAAK+J,WAAWhG,OAAOjC,Y,GAJCuC,GCarBuQ,GAXO,WACpB,OACE,kBAAC,KAAD,CAAUN,MAAOA,IACf,yBAAKK,UAAU,OACb,kBAAC,GAAD,MACA,kBAAC,GAAD,SCCYE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,GAAD,MAASrM,SAASsM,eAAe,SDqI3C,kBAAmBlS,WACrBA,UAAUmS,cAAcC,MAAM9U,MAAK,SAAA+U,GACjCA,EAAaC,iB","file":"static/js/main.1e487596.chunk.js","sourcesContent":["import CurrentArea from \"../../modal/currentArea\";\nimport Deal, { Address } from \"../../modal/deal\";\n\nconst AREA_NAME_URL_PARAMETER: string = \"areaName\";\nconst LATITUDE_URL_PARAMETER: string = \"latitude\";\nconst LONGITUDE_URL_PARAMETER: string = \"longitude\";\n\nexport enum ServiceName {\n  CREATE_DEAL = \"CREATE_DEAL\",\n  GET_DEALS = \"GET_DEALS\",\n  GET_CURRENT_ADDRESS = \"GET_CURRENT_ADDRESS\",\n  UPLOAD_IMAGE = \"UPLOAD_IMAGE\"\n}\n\nexport const CREATE_DEAL = (deal: Deal): Endpoint => {\n  return {\n    body: JSON.stringify(deal),\n    hasMock: false,\n    isMultipartFileRequest: false,\n    method: \"POST\",\n    url: \"/deals\",\n    serviceName: ServiceName.CREATE_DEAL\n  };\n};\n\nexport const GET_CURRENT_ADDRESS = (currentArea: CurrentArea) => {\n  return {\n    method: \"GET\",\n    hasMock: true,\n    isMultipartFileRequest: false,\n    url: \"/position\",\n    optionalRequestParam: () =>\n      generateCurrentAreaRequestParameter(currentArea),\n    serviceName: ServiceName.GET_CURRENT_ADDRESS\n  };\n};\n\nexport const GET_DEALS = (address: Address): Endpoint => {\n  return {\n    hasMock: true,\n    isMultipartFileRequest: false,\n    method: \"GET\",\n    url: \"/deals\",\n    optionalRequestParam: () =>\n      `?${generateParameter(AREA_NAME_URL_PARAMETER, address.area || \"\")}`,\n    serviceName: ServiceName.GET_DEALS\n  };\n};\n\nexport const UPLOAD_IMAGE = (image: any): Endpoint => {\n  return {\n    body: image,\n    hasMock: false,\n    isMultipartFileRequest: true,\n    method: \"POST\",\n    url: \"/image\",\n    serviceName: ServiceName.UPLOAD_IMAGE\n  };\n};\n\nconst generateCurrentAreaRequestParameter = (\n  currentArea: CurrentArea\n): string => {\n  console.debug(\n    \"service.ts: generateCurrentAreaRequestParameter -\",\n    currentArea\n  );\n  if (currentArea.areaName) {\n    return `?${generateParameter(\n      AREA_NAME_URL_PARAMETER,\n      currentArea.areaName\n    )}`;\n  } else if (currentArea.coordinate) {\n    return `?${LATITUDE_URL_PARAMETER}=${currentArea.coordinate.latitude}&${LONGITUDE_URL_PARAMETER}=${currentArea.coordinate.longitude}`;\n  } else {\n    console.warn(\"CurrentArea input might be invalid\");\n    return \"\";\n  }\n};\n\nconst generateParameter = (key: string, value: string) => {\n  return `${key}=${value}`;\n};\n\nexport interface Endpoint {\n  body?: any;\n  errorReturn?: any;\n  hasMock: boolean;\n  isMultipartFileRequest: boolean;\n  method: string;\n  url: string;\n  optionalRequestParam?: () => string;\n  serviceName: ServiceName;\n}\n","import { Coordinate, GetDealResponse, Address } from \"../../modal/deal\";\nimport { type } from \"os\";\n\nexport enum ReduxActopnTypes {\n  SET_ADDRESS_PREDICTION = \"SET_ADDRESS_PREDICTION\",\n  SET_DEALS = \"SET_DEAL\",\n  SET_LOADING_POSITION = \"SET_LOADING_POSITION\",\n  SET_GEOLOCATION = \"SET_GEOLOCATION\",\n  SET_SELECTED_ADDRESS = \"SET_SELECTED_ADDRESS\"\n}\n\nexport const setAddressPrediction = (addresses: Address[]) => {\n  return function(dispatch: any) {\n    dispatch({\n      type: ReduxActopnTypes.SET_ADDRESS_PREDICTION,\n      payload: addresses\n    });\n  };\n};\n\nexport const setGeolocation = (coordinate: Coordinate) => {\n  return function(dispatch: any) {\n    dispatch({\n      type: ReduxActopnTypes.SET_GEOLOCATION,\n      payload: coordinate\n    });\n  };\n};\n\nexport const setLoadingPosition = (isLoadingPosition: boolean) => {\n  return function(disptach: any) {\n    disptach({\n      type: ReduxActopnTypes.SET_LOADING_POSITION,\n      payload: isLoadingPosition\n    });\n  };\n};\n\nexport const setDeals = (getDealsResponse: GetDealResponse) => {\n  return function(dispatch: any) {\n    dispatch({\n      type: ReduxActopnTypes.SET_DEALS,\n      payload: getDealsResponse\n    });\n  };\n};\n\nexport const setSelectedAddress = (address: Address) => {\n  return function(dispatch: any) {\n    dispatch({\n      type: ReduxActopnTypes.SET_SELECTED_ADDRESS,\n      payload: address\n    });\n  };\n};\n","import { Endpoint, ServiceName } from \"./service\";\nimport { GetDealResponse, Address } from \"../../modal/deal\";\n\nexport default class ServiceExecutor {\n  constructor(\n    private readonly isMock: boolean,\n    private readonly serviceUrl: string,\n    private readonly headers: any\n  ) {}\n\n  public async execute(endpoint: Endpoint): Promise<any> {\n    if (this.isMock && endpoint.hasMock) {\n      return Promise.resolve(getResponse(endpoint.serviceName));\n    } else {\n      let headers = this.generateHeaders(endpoint.isMultipartFileRequest);\n      let requestParam: string = endpoint.optionalRequestParam\n        ? endpoint.optionalRequestParam()\n        : \"\";\n      let requestUrl = this.serviceUrl + endpoint.url + requestParam;\n      return fetch(requestUrl, {\n        body: endpoint.body,\n        headers,\n        method: endpoint.method,\n        mode: \"cors\"\n      })\n        .then(result => {\n          if (result.status === 204) {\n            return Promise.resolve();\n          } else {\n            return result.json();\n          }\n        })\n        .then(result => Promise.resolve(result))\n        .catch(exception => {\n          console.warn(\n            \"Something is wrong while fetch: \",\n            requestUrl,\n            exception\n          );\n          return Promise.reject(exception);\n        });\n    }\n  }\n\n  protected isJsonResponse(response: string): boolean {\n    try {\n      JSON.parse(response);\n      return true;\n    } catch (ex) {\n      return false;\n    }\n  }\n\n  protected generateHeaders = (isMultipartFileRequest: boolean) => {\n    return !isMultipartFileRequest\n      ? {\n          ...this.headers,\n          \"Content-Type\": \"application/json\"\n        }\n      : { ...this.headers };\n  };\n}\n\nconst getResponse = (serviceName: ServiceName): any => {\n  switch (serviceName) {\n    case ServiceName.GET_DEALS:\n      return GET_DEALS_RESPONSE;\n    case ServiceName.GET_CURRENT_ADDRESS:\n      return GET_POSITION_RESPONSE;\n    default:\n      return Promise.reject();\n  }\n};\n\nconst GET_DEALS_RESPONSE: GetDealResponse = {\n  deals: [\n    {\n      address: {\n        id: 0,\n        street1: \"街道1\",\n        street2: \"地下B座\",\n        city: \"澳門\",\n        state: \"\",\n        zipCode: \"\",\n        country: \"澳門\",\n        coordinate: {\n          latitude: 113,\n          longitude: 234\n        }\n      },\n      description:\n        '<p><img src=\"https://storage.cloud.google.com/deal_image/1577871875967\"></p>',\n      title: \"澳門 蛋逹王子\",\n      timestamp: 1577872077582\n    },\n    {\n      address: {\n        id: 0,\n        street1: \"街道1\",\n        street2: \"地下B座\",\n        city: \"澳門\",\n        state: \"\",\n        zipCode: \"\",\n        country: \"澳門\",\n        coordinate: {\n          latitude: 113,\n          longitude: 234\n        }\n      },\n      description:\n        '<p>這個東西一點都不好吃啊!!!</p><p><br></p><p><img src=\"https://storage.cloud.google.com/deal_image/1577872169235\"></p><p><br></p><ul><li>都是代碼，怎麽吃啊???</li></ul>',\n      title: \"澳門 CRAZY 蛋逹王子\",\n      timestamp: 1576871229332\n    },\n    {\n      address: {\n        id: 0,\n        street1: \"街道1\",\n        street2: \"地下B座\",\n        city: \"澳門\",\n        state: \"\",\n        zipCode: \"\",\n        country: \"澳門\",\n        coordinate: {\n          latitude: 113,\n          longitude: 234\n        }\n      },\n      description:\n        '<p>這個東西一點都不好吃啊!!!</p><p><br></p><p><img src=\"https://storage.cloud.google.com/deal_image/1577872169235\"></p><p><br></p><ul><li>都是代碼，怎麽吃啊???</li></ul><p>這個東西一點都不好吃啊!!!</p><p><br></p><p><img src=\"https://storage.cloud.google.com/deal_image/1577872169235\"></p><p><br></p><ul><li>都是代碼，怎麽吃啊???</li></ul><p>這個東西一點都不好吃啊!!!</p><p><br></p><p><img src=\"https://storage.cloud.google.com/deal_image/1577872169235\"></p><p><br></p><ul><li>都是代碼，怎麽吃啊???</li></ul><p>這個東西一點都不好吃啊!!!</p><p><br></p><p><img src=\"https://storage.cloud.google.com/deal_image/1577872169235\"></p><p><br></p><ul><li>都是代碼，怎麽吃啊???</li></ul><p>這個東西一點都不好吃啊!!!</p><p><br></p><p><img src=\"https://storage.cloud.google.com/deal_image/1577872169235\"></p><p><br></p><ul><li>都是代碼，怎麽吃啊???</li></ul><p>這個東西一點都不好吃啊!!!</p><p><br></p><p><img src=\"https://storage.cloud.google.com/deal_image/1577872169235\"></p><p><br></p><ul><li>都是代碼，怎麽吃啊???</li></ul><p>這個東西一點都不好吃啊!!!</p><p><br></p><p><img src=\"https://storage.cloud.google.com/deal_image/1577872169235\"></p><p><br></p><ul><li>都是代碼，怎麽吃啊???</li></ul><p>這個東西一點都不好吃啊!!!</p><p><br></p><p><img src=\"https://storage.cloud.google.com/deal_image/1577872169235\"></p><p><br></p><ul><li>都是代碼，怎麽吃啊???</li></ul><p>這個東西一點都不好吃啊!!!</p><p><br></p><p><img src=\"https://storage.cloud.google.com/deal_image/1577872169235\"></p><p><br></p><ul><li>都是代碼，怎麽吃啊???</li></ul><p>這個東西一點都不好吃啊!!!</p><p><br></p><p><img src=\"https://storage.cloud.google.com/deal_image/1577872169235\"></p><p><br></p><ul><li>都是代碼，怎麽吃啊???</li></ul><p>這個東西一點都不好吃啊!!!</p><p><br></p><p><img src=\"https://storage.cloud.google.com/deal_image/1577872169235\"></p><p><br></p><ul><li>都是代碼，怎麽吃啊???</li></ul><p>這個東西一點都不好吃啊!!!</p><p><br></p><p><img src=\"https://storage.cloud.google.com/deal_image/1577872169235\"></p><p><br></p><ul><li>都是代碼，怎麽吃啊???</li></ul><p>這個東西一點都不好吃啊!!!</p><p><br></p><p><img src=\"https://storage.cloud.google.com/deal_image/1577872169235\"></p><p><br></p><ul><li>都是代碼，怎麽吃啊???</li></ul><p>這個東西一點都不好吃啊!!!</p><p><br></p><p><img src=\"https://storage.cloud.google.com/deal_image/1577872169235\"></p><p><br></p><ul><li>都是代碼，怎麽吃啊???</li></ul><p>這個東西一點都不好吃啊!!!</p><p><br></p><p><img src=\"https://storage.cloud.google.com/deal_image/1577872169235\"></p><p><br></p><ul><li>都是代碼，怎麽吃啊???</li></ul><p>這個東西一點都不好吃啊!!!</p><p><br></p><p><img src=\"https://storage.cloud.google.com/deal_image/1577872169235\"></p><p><br></p><ul><li>都是代碼，怎麽吃啊???</li></ul><p>這個東西一點都不好吃啊!!!</p><p><br></p><p><img src=\"https://storage.cloud.google.com/deal_image/1577872169235\"></p><p><br></p><ul><li>都是代碼，怎麽吃啊???</li></ul><p>這個東西一點都不好吃啊!!!</p><p><br></p><p><img src=\"https://storage.cloud.google.com/deal_image/1577872169235\"></p><p><br></p><ul><li>都是代碼，怎麽吃啊???</li></ul>',\n      title: \"澳門 CRAZY 蛋逹王子\",\n      timestamp: 1577872407269\n    }\n  ]\n};\n\nconst GET_POSITION_RESPONSE: Address[] = [\n  {\n    id: 0,\n    area: \"澳門\",\n    formattedAddress: \"澳門馬交石巷信昌工業大廈\",\n    country: \"澳門\"\n  },\n  {\n    id: 0,\n    area: \"澳門\",\n    formattedAddress: \"澳門漁翁街166號\",\n    country: \"澳門\"\n  },\n  {\n    id: 0,\n    area: \"澳門\",\n    formattedAddress: \"澳門漁翁街148號\",\n    country: \"澳門\"\n  },\n  {\n    id: 0,\n    area: \"澳門\",\n    formattedAddress: \"澳門漁翁街90號\",\n    country: \"澳門\"\n  },\n  {\n    id: 0,\n    area: \"澳門\",\n    formattedAddress: \"澳門花地瑪堂區\",\n    city: \"花地瑪堂區\",\n    country: \"澳門\"\n  },\n  {\n    id: 0,\n    area: \"澳門\",\n    formattedAddress: \"澳門\",\n    country: \"澳門\"\n  },\n  {\n    id: 0,\n    area: \"澳門\",\n    formattedAddress: \"澳門\",\n    country: \"澳門\"\n  }\n];\n","import AppContext from \"./appContext\";\nimport { Coordinate } from \"../modal/deal\";\n\nconst HOUR = 1000 * 60 * 60;\nconst DAY = HOUR * 24;\nconst WEEK = DAY * 7;\nconst MONTH = DAY * 30;\nconst YEAR = DAY * 365;\n\nexport default class Transformer {\n  constructor(private readonly _lables: any) {}\n  timeDifferentCalcualtor(timestamp: number): string {\n    if (timestamp) {\n      let currentDate: Date = new Date();\n      let dateCreated: Date = new Date(timestamp);\n      let timeDifference: number =\n        currentDate.getTime() - dateCreated.getTime();\n      return this.getLabelAccrodingToTimeDifference(timeDifference);\n    } else {\n      console.warn(\"timestamp error: \", timestamp);\n      return this._lables.date.unknown;\n    }\n  }\n\n  getLabelAccrodingToTimeDifference(timeDifference: number): string {\n    // Determine if display detail days needed.\n    const dayDifferent = Math.round(timeDifference / DAY);\n    return dayDifferent > 0\n      ? `${dayDifferent}${this._lables.date.day}`\n      : this._lables.date.today;\n  }\n\n  getCurrentLocation(callBack: any): void {\n    navigator.geolocation.getCurrentPosition((position: Position) => {\n      let { latitude, longitude } = position.coords;\n      let currentPosition: Coordinate = {\n        latitude,\n        longitude\n      };\n      callBack(currentPosition);\n    });\n  }\n}\n","import ServiceExecutor from \"./middleware/serviceExecutor\";\nimport Transformer from \"./transformer\";\nimport chineseTraditionalLabel from \"../content/labels/chinese.traditional.json\";\n\nexport default class AppContext {\n  // Deal Refresh\n  private ALLOW_DEAL_REFRESH: boolean = false;\n  private readonly DEAL_REFRESH_TIME: number = 5 * 1000;\n\n  // API Headers\n  private readonly APIKEY = \"vKZywb959gExXaEHSwdzdq7MfZu3Nb\";\n  private readonly X_MADT_APPID: string = \"localdeal\";\n  private readonly X_MADT_APP_VERSION: string = \"0.0.1\";\n\n  private readonly _serviceExecutor: ServiceExecutor = new ServiceExecutor(\n    this.isMock,\n    this.serviceUrl,\n    this.headers\n  );\n\n  private readonly _transformer: Transformer = new Transformer(this.labels);\n\n  get allowDealRefresh(): boolean {\n    return this.ALLOW_DEAL_REFRESH;\n  }\n\n  set allowDealRefresh(isAllowDealRefresh: boolean) {\n    this.ALLOW_DEAL_REFRESH = isAllowDealRefresh;\n  }\n\n  get dealRefreshTime(): number {\n    return this.DEAL_REFRESH_TIME;\n  }\n\n  get headers() {\n    let { APIKEY, X_MADT_APPID, X_MADT_APP_VERSION } = this;\n    return {\n      APIKEY: APIKEY,\n      XMADTAPPID: X_MADT_APPID,\n      XMADTAPPVERSION: X_MADT_APP_VERSION\n    };\n  }\n\n  get labels() {\n    return chineseTraditionalLabel;\n  }\n\n  get isMock(): boolean {\n    return false;\n  }\n\n  get isProd(): boolean {\n    return true;\n  }\n\n  get serviceExecutor(): ServiceExecutor {\n    return this._serviceExecutor;\n  }\n\n  get serviceUrl(): string {\n    // TODO need prod url\n    return this.isProd ? \"https://liuda.site:8082\" : \"http://127.0.0.1:8081\";\n  }\n\n  get transformer(): Transformer {\n    return this._transformer;\n  }\n}\n","import { Component } from \"react\";\nimport AppContext from \"./appContext\";\n// import { connect } from \"react-redux\";\n\nexport default class ApplicationComponent<\n  ChildProps = {},\n  ChildState = {}\n> extends Component<ChildProps, ChildState> {\n  private readonly _appContext: AppContext = new AppContext();\n\n  get appContext(): AppContext {\n    return this._appContext;\n  }\n}\n","import React from \"react\";\nimport ApplicationComponent from \"./applicationComponent\";\nimport { Address } from \"../modal/deal\";\nimport { H5, View } from \".\";\n\nexport interface Props {\n  address: Address;\n}\n\nexport default class AddressDisplay extends ApplicationComponent<Props> {\n  render() {\n    return (\n      <View isFlexDirectionRow={true}>\n        <H5>{this.generateAddressWithSpace(this.props.address)}</H5>\n      </View>\n    );\n  }\n\n  protected generateAddressWithSpace(address: Address): string {\n    let { street1, street2, city, state, zipCode, country } = address;\n    // return `\n    // ${this.removeNotValidAddress(street1 || \"\")}\n    // ${this.removeNotValidAddress(street2 || \"\")}\n    // ${this.removeNotValidAddress(city || \"\")}\n    // ${this.removeNotValidAddress(state || \"\")}\n    // ${this.removeNotValidAddress(zipCode || \"\")}\n    // ${this.removeNotValidAddress(country)}`;\n    return address.formattedAddress || \"\";\n  }\n\n  protected removeNotValidAddress(input: string): string {\n    return input ? `${input} ` : \"\";\n  }\n}\n","// button\nconst borderRadius = 15;\n\n// color\nconst BLUE = \"#78C5EF\";\nconst GREEN = \"#5CC928\";\nconst LIGHT_GREY = \"#7D7D7D\";\nconst WHITE = \"#FFFFFF\";\n\n// font\nconst FONT_SIZE = 16;\n\nexport interface StyleSheet {\n  button: {\n    borderRadius: number;\n  };\n  color: {\n    primaryColor: string;\n    secondaryColor: string;\n  };\n  font: {\n    fontSize: number;\n    white: string;\n  };\n  remind: {\n    primaryColor: string;\n    secondaryColor: string;\n  };\n  textField: {\n    borderColor: string;\n    borderRadius: number;\n    borderWidth: number;\n  };\n}\n\nexport const styleSchema: StyleSheet = {\n  button: {\n    borderRadius\n  },\n  color: {\n    primaryColor: BLUE,\n    secondaryColor: LIGHT_GREY\n  },\n  font: {\n    fontSize: FONT_SIZE,\n    white: WHITE\n  },\n  remind: {\n    primaryColor: GREEN,\n    secondaryColor: BLUE\n  },\n  textField: {\n    borderColor: BLUE,\n    borderRadius,\n    borderWidth: 2\n  }\n};\n","import React, { Component } from \"react\";\n\ninterface Props {\n  style?: any;\n}\n\nexport default class H4 extends Component<Props> {\n  render() {\n    return (\n      <h4 style={this.props.style ? this.props.style : styles.textStyle}>\n        {this.props.children}\n      </h4>\n    );\n  }\n}\n\nconst styles = {\n  textStyle: {\n    margin: 0\n  }\n};\n","import React, { Component } from \"react\";\nimport { styleSchema } from \"./\";\nimport color from \"@material-ui/core/colors/amber\";\n\ninterface Props {\n  color?: string;\n}\n\nexport default class H5 extends Component<Props> {\n  render() {\n    let color = {\n      color: this.props.color\n        ? this.props.color\n        : styleSchema.color.secondaryColor\n    };\n    return <h5 style={{ ...styles.text, ...color }}>{this.props.children}</h5>;\n  }\n}\n\nconst styles = {\n  text: {\n    margin: 0\n  }\n};\n","import React, { Component } from \"react\";\nimport Card from \"@material-ui/core/Card\";\nimport { CardContent, Collapse } from \"@material-ui/core\";\n\nexport interface Props {\n  collapsedHeight?: number;\n  contents: React.ReactNode;\n  onClick: (any?: any) => void;\n  title?: string;\n}\n\nexport interface State {\n  isCollapsed: boolean;\n}\n\nexport default class LocalDealCard extends Component<Props, State> {\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      isCollapsed: false\n    };\n  }\n\n  render() {\n    let { collapsedHeight, contents } = this.props;\n    return (\n      <Collapse\n        in={this.state.isCollapsed}\n        collapsedHeight={collapsedHeight ? collapsedHeight : 180}\n      >\n        <Card style={styles.cardContainer}>\n          <CardContent onClick={() => this.onClickedContent()}>\n            {contents}\n          </CardContent>\n        </Card>\n      </Collapse>\n    );\n  }\n\n  onClickedContent = () => {\n    this.setState({\n      isCollapsed: !this.state.isCollapsed\n    });\n  };\n}\n\nconst styles = {\n  cardContainer: {\n    marginLeft: 1,\n    marginRight: 1,\n    marginBottom: 5,\n    marginTop: 5\n  }\n};\n","import React from \"react\";\nimport ApplicationComponent from \"./applicationComponent\";\nimport TextField from \"@material-ui/core/TextField\";\nimport { withStyles } from \"@material-ui/core\";\nimport { styleSchema } from \"./\";\nimport { StyleSheet } from \"./stylesheet\";\n\nconst overrideStyles = (style: StyleSheet) => {\n  let textFieldStyles = style.textField;\n  return {\n    notchedOutline: {\n      borderColor: textFieldStyles.borderColor,\n      borderRadius: textFieldStyles.borderRadius,\n      borderWidth: textFieldStyles.borderWidth\n    }\n  };\n};\n\nconst styles = {\n  textFieldStyle: {\n    height: \"100%\",\n    marginLeft: 10,\n    marginRight: 10,\n    width: \"80%\"\n  }\n};\n\nexport interface Props {\n  classes?: any;\n  children?: React.ReactNode;\n  defaultValue?: string;\n  onBlur?: () => void;\n  onChange: (textInput: any) => void;\n  onFocus?: () => void;\n  text: string;\n}\n\nclass LocalDealTextField extends ApplicationComponent<Props> {\n  render() {\n    let onBlurFunction = this.props.onBlur ? this.props.onBlur : () => {};\n    let onFocusFunction = this.props.onFocus ? this.props.onFocus : () => {};\n    return (\n      <TextField\n        InputProps={{\n          classes: {\n            notchedOutline: this.props.classes.notchedOutline\n          }\n        }}\n        label={this.props.text}\n        onBlur={() => onBlurFunction()}\n        onChange={text => this.props.onChange(text.target.value)}\n        onFocus={() => onFocusFunction()}\n        style={styles.textFieldStyle}\n        defaultValue={this.props.defaultValue}\n        variant=\"outlined\"\n      >\n        {this.props.children}\n      </TextField>\n    );\n  }\n}\n\nexport default withStyles(overrideStyles(styleSchema))(LocalDealTextField);\n","import React from \"react\";\nimport ApplicationComponent from \"./applicationComponent\";\nimport ReactQuill, { Quill } from \"react-quill\";\nimport \"react-quill/dist/quill.snow.css\";\nimport { UPLOAD_IMAGE } from \"./middleware/service\";\n\nconst RESIZE_IMAGE_PERCENTAGE: number = 0.5;\n\nconst richTextEditorOptions = [\n  [\n    \"bold\",\n    \"italic\",\n    \"underline\",\n    \"strike\",\n    { header: [1, 2, 3, 4, 5, 6, false] },\n    { align: [] }\n  ], // toggled buttons\n  //   [\"blockquote\", \"code-block\"],\n  [\"image\"],\n  [\"link\"],\n  //   [{ header: 1 }, { header: 2 }], // custom button values\n  [{ list: \"ordered\" }, { list: \"bullet\" }],\n  //   [{ script: \"sub\" }, { script: \"super\" }], // superscript/subscript\n  //   [{ indent: \"-1\" }, { indent: \"+1\" }], // outdent/indent\n  //   [{ direction: \"rtl\" }], // text direction\n\n  //   [{ size: [\"small\", \"medium\", \"large\", \"huge\"] }], // custom dropdown\n  [{ color: [] }, { background: [] }], // dropdown with defaults from theme\n  //   [{ font: [] }],\n  [\"clean\"] // remove formatting button\n];\n\n// const modules = {\n//   toolbar\n// };\n\nexport interface Props {\n  onChangeValue: (value: string) => void;\n}\n\nexport default class RichTextEditor extends ApplicationComponent<Props> {\n  private quillRef: any;\n\n  render() {\n    return (\n      <ReactQuill\n        ref={ref => (this.quillRef = ref?.getEditor())}\n        modules={this.getModules()}\n        onChange={value => this.props.onChangeValue(value)}\n      ></ReactQuill>\n    );\n  }\n\n  getModules() {\n    return {\n      toolbar: {\n        container: richTextEditorOptions,\n        handlers: {\n          image: this.imageHandlerTest\n        }\n      }\n    };\n  }\n\n  // this.quillRef.format() // change the current format, it will not affect anything that is already in the content area\n  // this.quillRef.formatLine() // format the whole line, usually it will affect the whole globally.\n  // this.quillRef.formatText() // this work for image as well!!! give the style for the current dom\n\n  // TODO this method needs to be refine!!!\n  imageHandlerTest = () => {\n    const input = document.createElement(\"input\");\n    input.setAttribute(\"type\", \"file\");\n    input.setAttribute(\"accept\", \"image/*\");\n    input.click();\n    input.onchange = async () => {\n      if (input.files) {\n        const file = input.files[0];\n        const formData = new FormData();\n        formData.append(\"image\", file, \"image\");\n\n        // // Save current cursor state\n        const range = this.quillRef.getSelection(true);\n\n        // // need to replace this with in app progressor!!!\n        this.quillRef.formatLine(range.index, 1, \"align\", \"center\");\n        this.quillRef.formatText(range.index, 1, {\n          align: \"center\",\n          width: 100,\n          height: 100\n        });\n\n        // this.quillRef.setSelection(range.index + 2);\n        this.appContext.serviceExecutor\n          .execute(UPLOAD_IMAGE(formData))\n          .then(result => {\n            let imageUrl: string = result.url;\n            this.quillRef.deleteText(range.index, 1);\n            this.quillRef.insertEmbed(range.index, \"image\", imageUrl);\n            this.resizeImage(imageUrl).then(({ height, width }) => {\n              this.quillRef.formatText(range.index, 1, {\n                height,\n                width\n              });\n              this.quillRef.setSelection(range.index + 1);\n            });\n          });\n      }\n    };\n  };\n\n  protected getImageResizeValue() {\n    return RESIZE_IMAGE_PERCENTAGE;\n  }\n\n  protected async resizeImage(\n    url: string\n  ): Promise<{ height: number; width: number }> {\n    return new Promise((resolve, reject) => {\n      let resizeValue: number = this.getImageResizeValue();\n      let image = new Image();\n      image.src = url;\n      image.onload = () =>\n        resolve({\n          height: image.height * resizeValue,\n          width: image.width * resizeValue\n        });\n    });\n  }\n}\n","import React from \"react\";\nimport ApplicationComponent from \"./applicationComponent\";\nimport { Button } from \"@material-ui/core\";\nimport { H5, View } from \".\";\n\nexport interface Props {\n  onClickPrimaryButton: () => void;\n  onClickSecondaryButton: () => void;\n  primaryButtonLabel: string;\n  secondaryButtonLabel: string;\n}\n\nexport default class TwinButton extends ApplicationComponent<Props> {\n  render() {\n    let {\n      onClickPrimaryButton,\n      onClickSecondaryButton,\n      primaryButtonLabel,\n      secondaryButtonLabel\n    } = this.props;\n    return (\n      <View isFlexDirectionRow={true} style={styles.rootContainer}>\n        <Button onClick={() => onClickPrimaryButton()} variant={\"outlined\"}>\n          <H5>{primaryButtonLabel}</H5>\n        </Button>\n        <Button onClick={() => onClickSecondaryButton()} variant={\"outlined\"}>\n          <H5>{secondaryButtonLabel}</H5>\n        </Button>\n      </View>\n    );\n  }\n}\n\nconst styles = {\n  rootContainer: {\n    alignItem: \"space-between\"\n  }\n};\n","import React from \"react\";\nimport ApplicationComponent from \"./applicationComponent\";\nimport { Box } from \"@material-ui/core\";\n\ninterface Props {\n  alignItems?: string;\n  chindren?: React.ReactNode;\n  isFlexDirectionRow?: boolean;\n  justifyContent?: string;\n  onClick?: () => void;\n  style?: any;\n}\n\nexport default class View extends ApplicationComponent<Props> {\n  render() {\n    return (\n      <Box\n        display=\"flex\"\n        flexDirection={this.props.isFlexDirectionRow ? \"row\" : \"column\"}\n        alignItems={this.props.alignItems ? this.props.alignItems : \"start\"}\n        justifyContent={\n          this.props.justifyContent ? this.props.justifyContent : \"start\"\n        }\n        onClick={() => (this.props.onClick ? this.props.onClick() : {})}\n        style={this.props.style}\n      >\n        {this.props.children}\n      </Box>\n    );\n  }\n}\n","import React from \"react\";\nimport ApplicationComponent from \"../../common/applicationComponent\";\nimport {\n  H4,\n  H5,\n  LocalDealTextField,\n  AddressDisplay,\n  View,\n  TwinButton,\n  RichTextEditor\n} from \"../../common\";\nimport { Address } from \"../../modal/deal\";\nimport { Button } from \"@material-ui/core\";\n\nexport interface Props {\n  currentAddress: Address;\n  onChangeRichTextValue: (value: string) => void;\n  onChangeTitleTextField: (value: string) => void;\n  onClickClose: () => void;\n  onClickSubmit: () => void;\n  useAutoPosition: boolean;\n}\n\nexport default class CreateDealLandingPageView extends ApplicationComponent<\n  Props\n> {\n  render() {\n    return (\n      <View style={styles.rootContainer}>\n        <this.HeaderSection />\n        <this.AddressSection />\n        <this.TitleTextField />\n        <this.HourOfOperationSection />\n        <this.DescriptionTextField />\n        <this.ButtonSection />\n      </View>\n    );\n  }\n\n  AddressSection = () => {\n    return (\n      <View style={{ margin: 10 }}>\n        {this.props.useAutoPosition ? (\n          <this.AddressAutoPositionDisplay />\n        ) : (\n          <this.AddressTextField />\n        )}\n      </View>\n    );\n  };\n\n  AddressAutoPositionDisplay = () => {\n    return <AddressDisplay address={this.props.currentAddress} />;\n  };\n\n  AddressTextField = () => {\n    return null;\n  };\n\n  ButtonSection = () => {\n    let label = this.appContext.labels.createDealPage;\n    return (\n      <TwinButton\n        onClickPrimaryButton={() => this.props.onClickSubmit()}\n        onClickSecondaryButton={() => this.props.onClickClose()}\n        primaryButtonLabel={label.create}\n        secondaryButtonLabel={label.cancel}\n      />\n    );\n  };\n\n  DescriptionTextField = () => {\n    return <RichTextEditor onChangeValue={this.props.onChangeRichTextValue} />;\n  };\n\n  HeaderSection = () => {\n    let label = this.appContext.labels.createDealPage;\n    return (\n      <View style={styles.headerContainer} isFlexDirectionRow={true}>\n        <H4 style={styles.headerText}>{label.header}</H4>\n        <Button onClick={() => this.props.onClickClose()}>\n          <H5>{label.close}</H5>\n        </Button>\n      </View>\n    );\n  };\n\n  HourOfOperationSection = () => {\n    return null;\n  };\n\n  TitleTextField = () => {\n    return (\n      <LocalDealTextField\n        onChange={this.props.onChangeTitleTextField}\n        text={this.appContext.labels.createDealPage.textFieldTitle}\n      />\n    );\n  };\n}\n\nconst styles = {\n  headerContainer: {\n    justifyContent: \"space-between\",\n    width: \"80%\"\n  },\n  headerText: {\n    marginTop: 10\n  },\n  rootContainer: {\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    marginLeft: 20,\n    marginRight: 20\n  }\n};\n","import React from \"react\";\nimport ApplicationComponent from \"../../common/applicationComponent\";\nimport { CreateDealLandingPageView } from \".\";\nimport Deal, { Address, GetDealResponse } from \"../../modal/deal\";\nimport { CREATE_DEAL, GET_DEALS } from \"../../common/middleware/service\";\nimport { ReduxState } from \"../../common/redux/reducers\";\nimport { setDeals } from \"../../common/redux/action\";\nimport { connect } from \"react-redux\";\n\nexport interface Props {\n  currentAddress: Address;\n  onClickClose: () => void;\n  setDeals?: any;\n}\n\nexport interface State {\n  richTextValue: string;\n  title: string;\n  useAutoPosition: boolean;\n}\n\nexport class CreateDealLandingPage extends ApplicationComponent<Props, State> {\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      richTextValue: \"\",\n      title: \"\",\n      useAutoPosition: true\n    };\n  }\n\n  render() {\n    return (\n      <CreateDealLandingPageView\n        currentAddress={this.props.currentAddress}\n        onChangeRichTextValue={this.onChangeRichTextValue}\n        onChangeTitleTextField={this.onChangeTitleTextField}\n        onClickClose={() => this.props.onClickClose()}\n        onClickSubmit={this.onClickSubmit}\n        useAutoPosition={this.state.useAutoPosition}\n      />\n    );\n  }\n\n  protected onChangeRichTextValue = (richTextValue: string) => {\n    this.setState({\n      richTextValue\n    });\n  };\n\n  protected onChangeTitleTextField = (title: string) => {\n    this.setState({\n      title\n    });\n  };\n\n  protected onClickSubmit = async () => {\n    await this.appContext.serviceExecutor.execute(\n      CREATE_DEAL(this.generateDeal())\n    );\n    this.props.onClickClose();\n    await this.appContext.serviceExecutor\n      .execute(GET_DEALS(this.props.currentAddress))\n      .then((getDealResponse: GetDealResponse) =>\n        this.props.setDeals(getDealResponse)\n      );\n  };\n\n  protected generateDeal(): Deal {\n    return {\n      address: this.props.currentAddress,\n      description: this.state.richTextValue,\n      timestamp: 0,\n      title: this.state.title\n    };\n  }\n}\n\nconst mapStateToProps = (state: ReduxState) => ({\n  currentAddress: state.selectedAddress\n});\n\nexport default connect(mapStateToProps, { setDeals })(CreateDealLandingPage);\n","import React from \"react\";\nimport ApplicationComponent from \"../../common/applicationComponent\";\nimport { AddressPredictionView } from \".\";\nimport { ReduxState } from \"../../common/redux/reducers\";\nimport { connect } from \"react-redux\";\nimport { Address, GetDealResponse } from \"../../modal/deal\";\nimport { setDeals, setSelectedAddress } from \"../../common/redux/action\";\nimport { GET_DEALS } from \"../../common/middleware/service\";\n\nexport interface Props {\n  addressPrediction: Address[];\n  isPositionLoading: boolean;\n  selectedAddress: Address;\n  setDeals?: any;\n  setSelectedAddress?: any;\n}\n\nexport class AddressPrediction extends ApplicationComponent<Props> {\n  render() {\n    this.setDefaultSelectedAddress();\n    return (\n      <AddressPredictionView\n        addressPrediction={this.props.addressPrediction}\n        isPositionLoading={this.props.isPositionLoading}\n        onSelectAddress={this.onSelectAddress}\n      />\n    );\n  }\n\n  protected setDefaultSelectedAddress() {\n    if (\n      this.props.addressPrediction.length > 0 &&\n      !this.props.selectedAddress.area\n    ) {\n      this.onSelectAddress();\n    }\n  }\n\n  protected onSelectAddress = (index: number = 0) => {\n    if (this.props.addressPrediction) {\n      const selectedAddress: Address = this.props.addressPrediction[index];\n      this.props.setSelectedAddress(selectedAddress);\n      this.setDeals(selectedAddress);\n    }\n  };\n\n  protected setDeals(selectedAddress: Address) {\n    if (selectedAddress.area !== this.props.selectedAddress?.area) {\n      this.appContext.serviceExecutor\n        .execute(GET_DEALS(selectedAddress))\n        .then((getDealResponse: GetDealResponse) => {\n          this.props.setDeals(getDealResponse);\n        });\n    }\n  }\n}\n\nconst mapStateToProps = (state: ReduxState): Props => ({\n  addressPrediction: state.addressesPrediction,\n  isPositionLoading: state.isLoadingPosition,\n  selectedAddress: state.selectedAddress\n});\n\nexport default connect(mapStateToProps, { setDeals, setSelectedAddress })(\n  AddressPrediction\n);\n","import React from \"react\";\nimport ApplicationComponent from \"../../common/applicationComponent\";\nimport { Address } from \"../../modal/deal\";\nimport { FormControl, InputLabel, NativeSelect } from \"@material-ui/core\";\nimport { H4, View } from \"../../common\";\n\nexport interface Props {\n  addressPrediction: Address[];\n  isPositionLoading: boolean;\n  onSelectAddress: (index?: number) => void;\n}\n\nexport default class AddressPredictionView extends ApplicationComponent<Props> {\n  render() {\n    return (\n      <View style={styles.rootContainer}>\n        {this.props.isPositionLoading ? (\n          <this.PositionLoading />\n        ) : (\n          <this.AddressPredictionSection />\n        )}\n      </View>\n    );\n  }\n\n  AddressPredictionSection = () => {\n    let addressPrediction: Address[] = this.props.addressPrediction\n      ? this.props.addressPrediction\n      : [];\n    let addressPredictionOptions = addressPrediction.map(address => {\n      return <option>{address.formattedAddress}</option>;\n    });\n    return (\n      <FormControl>\n        <InputLabel>{this.appContext.labels.position.currentArea}</InputLabel>\n        <NativeSelect\n          onChange={event =>\n            this.props.onSelectAddress(event.target.selectedIndex)\n          }\n        >\n          {addressPredictionOptions}\n        </NativeSelect>\n      </FormControl>\n    );\n  };\n\n  GetValue = (name: any) => (event: any) => {};\n\n  PositionLoading = () => {\n    return <H4>{this.appContext.labels.position.loading}</H4>;\n  };\n}\n\nconst styles = {\n  rootContainer: {\n    marginTop: 15,\n    width: \"100%\"\n  }\n};\n","import React from \"react\";\nimport Deal, { Address } from \"../../modal/deal\";\nimport {\n  LocalDealCard,\n  H4,\n  H5,\n  LocalDealTextField,\n  styleSchema,\n  View,\n  AddressDisplay\n} from \"../../common\";\nimport ApplicationComponent from \"../../common/applicationComponent\";\nimport { Button, Box, Drawer } from \"@material-ui/core\";\nimport { CreateDealLandingPage } from \"../createDealLandingPage\";\nimport { AddressPrediction } from \"../addressPrediction\";\n\nexport interface Props {\n  deals: Deal[];\n  isCreateDealDrawerOpen: boolean;\n  onBlurTextField: () => void;\n  onClickCard: () => void;\n  onClickCreateDeal: () => void;\n  onCloseCreateDeal: () => void;\n  onClickDealSection: () => void;\n  onClickLocationButton: () => void;\n  onClickSearch: () => void;\n  onChangeSearchTextField: (text: string) => void;\n  onFocusTextField: () => void;\n  selectedAddress: Address;\n  showSearchButton: boolean;\n  textFieldValue: string;\n  useAutoLocation: boolean;\n}\n\nexport default class LandingPageView extends ApplicationComponent<Props> {\n  render() {\n    return (\n      <View style={styles.rootContainer}>\n        <this.TopBarSection />\n        <AddressPrediction />\n        <this.BodySection />\n      </View>\n    );\n  }\n\n  BodySection = () => {\n    return (\n      <>\n        <this.CreateDealSection />\n        <this.DealsSection />\n      </>\n    );\n  };\n\n  CreateDealSection = () => {\n    return (\n      <Drawer\n        anchor={\"top\"}\n        open={this.props.isCreateDealDrawerOpen}\n        onClose={() => this.props.onCloseCreateDeal()}\n      >\n        <CreateDealLandingPage onClickClose={this.props.onCloseCreateDeal} />\n      </Drawer>\n    );\n  };\n\n  CreateNewDealButton = () => {\n    return (\n      <Button\n        style={styles.createNewButton}\n        onClick={() => this.props.onClickCreateDeal()}\n        variant=\"outlined\"\n      >\n        <H5>{this.appContext.labels.landingPage.createDealButton}</H5>\n      </Button>\n    );\n  };\n\n  DealsSection = () => {\n    let dealsContent = this.props.deals ? this.props.deals : [];\n    let dealsCard = dealsContent.map(deal => {\n      return (\n        <LocalDealCard\n          contents={this.generateCardContent(deal)}\n          onClick={() => this.props.onClickCard()}\n          title={deal.title}\n        />\n      );\n    });\n    return (\n      <Box\n        onClick={() => this.props.onClickDealSection()}\n        style={styles.dealSectionContainer}\n      >\n        {dealsCard.length ? dealsCard : <this.NoDealInArea />}\n      </Box>\n    );\n  };\n\n  LocationButton = () => {\n    // let currentSearchMethodLabel = this.props.useAutoLocation\n    //   ? \"Need Label - 正在使用Google API定位\"\n    //   : \"Need Label - 手動輸入 - 短按換Google定位\";\n    // let searchMethodStyle = this.props.useAutoLocation\n    //   ? styles.searchMethodLabel.coordinate\n    //   : styles.searchMethodLabel.manual;\n    return (\n      <Button\n        disabled={this.props.useAutoLocation}\n        onClick={() => this.props.onClickLocationButton()}\n        style={styles.searchMethodLabel.coordinate}\n        variant=\"outlined\"\n      >\n        <View isFlexDirectionRow={true}>\n          <H5 color={styleSchema.font.white}>\n            {this.appContext.labels.landingPage.geolocationProvider +\n              \"\\n\" +\n              this.props.selectedAddress.area}\n          </H5>\n        </View>\n      </Button>\n    );\n  };\n\n  NoDealInArea = () => {\n    return <p>{this.appContext.labels.landingPage.noDeal}</p>;\n  };\n\n  SearchButton = () => {\n    return this.props.showSearchButton ? (\n      <Button\n        onClick={() => this.props.onClickSearch()}\n        style={styles.searchButton}\n        variant=\"outlined\"\n      >\n        <H5 color={styleSchema.font.white}>{\"Need Label - 搜尋\"}</H5>\n      </Button>\n    ) : null;\n  };\n\n  TextFieldArea = () => {\n    return (\n      <LocalDealTextField\n        defaultValue={this.props.textFieldValue}\n        onBlur={() => this.props.onBlurTextField()}\n        onChange={text => this.props.onChangeSearchTextField(text)}\n        onFocus={() => this.props.onFocusTextField()}\n        text={this.appContext.labels.landingPage.area}\n      />\n    );\n  };\n\n  TopBarSection = () => {\n    return (\n      <View isFlexDirectionRow={true} style={styles.topBarContainer}>\n        <this.LocationButton />\n        {/* Not sure if we want search for now */}\n        {/* <this.TextFieldArea />\n        <this.SearchButton /> */}\n        <this.CreateNewDealButton />\n      </View>\n    );\n  };\n\n  protected generateCardContent = (deal: Deal): React.ReactNode => {\n    let {\n      address,\n      category,\n      discussions,\n      description,\n      title,\n      timeAvailable,\n      timestamp,\n      vote\n    } = deal;\n    return (\n      <>\n        <View isFlexDirectionRow={true} style={styles.cardContainer}>\n          <H4>{title}</H4>\n          <H5>\n            {timestamp\n              ? this.appContext.transformer.timeDifferentCalcualtor(timestamp)\n              : \"Need Label - 不明\"}\n          </H5>\n        </View>\n        <View>\n          <AddressDisplay address={address} />\n          <div dangerouslySetInnerHTML={{ __html: description }} />\n        </View>\n      </>\n    );\n  };\n}\n\nconst styles = {\n  cardContainer: {\n    justifyContent: \"space-between\"\n  },\n  createNewButton: {\n    borderColor: styleSchema.color.secondaryColor,\n    borderRadius: styleSchema.button.borderRadius,\n    borderWidth: 3\n  },\n  dealSectionContainer: {\n    marginTop: 20,\n    width: \"100%\"\n  },\n  rootContainer: {\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    marginLeft: 20,\n    marginRight: 20\n  },\n  searchButton: {\n    borderColor: styleSchema.remind.secondaryColor,\n    borderRadius: styleSchema.button.borderRadius,\n    backgroundColor: styleSchema.remind.secondaryColor,\n    borderWidth: 3\n  },\n  searchMethodLabel: {\n    coordinate: {\n      borderColor: styleSchema.remind.primaryColor,\n      borderRadius: styleSchema.button.borderRadius,\n      backgroundColor: styleSchema.remind.primaryColor,\n      borderWidth: 3,\n      paddingBottom: 5,\n      paddingTop: 5\n    },\n    manual: {\n      borderColor: styleSchema.remind.secondaryColor,\n      borderRadius: styleSchema.button.borderRadius,\n      backgroundColor: styleSchema.remind.secondaryColor,\n      borderWidth: 3,\n      paddingBottom: 5,\n      paddingTop: 5\n    }\n  },\n  topBarContainer: {\n    justifyContent: \"space-between\",\n    marginTop: 20,\n    width: \"100%\"\n  }\n};\n","import React from \"react\";\nimport ApplicationComponent from \"../../common/applicationComponent\";\nimport Deal, { Coordinate, Address } from \"../../modal/deal\";\nimport { LandingPageView } from \".\";\nimport { GET_CURRENT_ADDRESS } from \"../../common/middleware/service\";\nimport CurrentArea from \"../../modal/currentArea\";\nimport { connect } from \"react-redux\";\nimport {\n  setAddressPrediction,\n  setDeals,\n  setGeolocation,\n  setLoadingPosition\n} from \"../../common/redux/action\";\nimport { ReduxState } from \"../../common/redux/reducers\";\n\nexport interface Props {\n  addressesPrediction: Address[];\n  position: CurrentArea;\n  deals: Deal[];\n  selectedAddress: Address;\n  setAddressPrediction?: any;\n  setDeals?: any;\n  setGeolocation?: any;\n  setLoadingPosition?: any;\n}\n\nexport interface State {\n  isCreateDealDrawerOpen: boolean;\n  showSearchButton: boolean;\n  textFieldValue: string;\n  useAutoLocation: boolean;\n}\n\nexport class LandingPage extends ApplicationComponent<Props, State> {\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      isCreateDealDrawerOpen: false,\n      showSearchButton: false,\n      textFieldValue: \"\",\n      useAutoLocation: true\n    };\n  }\n\n  async componentDidMount() {\n    await this.setCurrentPosition();\n    await this.setCurrentAddress();\n  }\n\n  protected async setCurrentPosition() {\n    if (this.appContext.isMock) {\n      return Promise.resolve();\n    }\n    return new Promise((resolve, reject) => {\n      this.appContext.transformer.getCurrentLocation(\n        (coordinate: Coordinate) => {\n          console.debug(\"Current Coordinate: \", coordinate);\n          this.props.setGeolocation(coordinate);\n          return resolve();\n        }\n      );\n    });\n  }\n\n  protected async setCurrentAddress() {\n    return new Promise((resolve, reject) => {\n      this.appContext.serviceExecutor\n        .execute(\n          GET_CURRENT_ADDRESS({\n            coordinate: this.props.position.coordinate\n          })\n        )\n        .then((addresses: Address[]) => {\n          this.props.setAddressPrediction(addresses);\n          this.props.setLoadingPosition(false);\n          return resolve();\n        });\n    });\n  }\n\n  protected onBlurTextField = () => {\n    // need to complete\n    console.log(\"onBlurTextField\");\n  };\n\n  protected onClickCreateDeal = () => {\n    // need to complete\n    console.log(\"onClickCreateDeal\");\n    this.setState({\n      isCreateDealDrawerOpen: true\n    });\n  };\n\n  protected onCloseCreateDeal = () => {\n    console.log(\"onCloseCreateDeal\");\n    this.setState({\n      isCreateDealDrawerOpen: false\n    });\n  };\n\n  protected onClickedCard = () => {\n    // need to complete\n    console.log(\"Card Clicked\");\n  };\n\n  protected onClickedDealSection = () => {\n    // need to complete\n    console.log(\"onClickedDealSection\");\n    this.setState({\n      showSearchButton: false\n    });\n  };\n\n  protected onClickLocationButton = () => {\n    // need to complete\n    console.log(\"onClickLocationButton\");\n    this.setState({\n      useAutoLocation: true\n    });\n  };\n\n  protected onClickSearch = () => {\n    // need to complete\n    console.log(\"onClickSearch\");\n    // this.setState({\n    //   showSearchButton: false\n    //   Disable this for now, user need internet to access the service anyway\n    //   useAutoLocation: false\n    // });\n    // this.getDeals();\n  };\n\n  protected onChangeSearchTextField = (textFieldValue: string) => {\n    // TODO need to think about if we need to allow user to search by area. because user will have coordinate by their location.\n    // search can be only for item!!!!!!!\n    // need to complete\n    console.log(\"onChangeSearchTextField\");\n    this.setState({\n      // currentSearchArea: { areaName: textFieldValue }\n    });\n  };\n\n  protected onFocusTextField = () => {\n    // need to complete\n    console.log(\"onFocusTextField\");\n    this.setState({\n      showSearchButton: true\n    });\n  };\n\n  protected sortDeals(inputDeals: Deal[]) {\n    inputDeals.sort((deal1, deal2) => {\n      return deal2.timestamp - deal1.timestamp;\n    });\n  }\n\n  render() {\n    let {\n      isCreateDealDrawerOpen,\n      showSearchButton,\n      textFieldValue,\n      useAutoLocation\n    } = this.state;\n    // sort deal\n    this.sortDeals(this.props.deals);\n    return (\n      <LandingPageView\n        deals={this.props.deals}\n        isCreateDealDrawerOpen={isCreateDealDrawerOpen}\n        onBlurTextField={this.onBlurTextField}\n        onClickCard={this.onClickedCard}\n        onClickCreateDeal={this.onClickCreateDeal}\n        onCloseCreateDeal={this.onCloseCreateDeal}\n        onClickDealSection={this.onClickedDealSection}\n        onClickLocationButton={this.onClickLocationButton}\n        onClickSearch={this.onClickSearch}\n        onChangeSearchTextField={this.onChangeSearchTextField}\n        onFocusTextField={this.onFocusTextField}\n        selectedAddress={this.props.selectedAddress}\n        showSearchButton={showSearchButton}\n        textFieldValue={textFieldValue}\n        useAutoLocation={useAutoLocation}\n      />\n    );\n  }\n}\n\nconst mapStateToProps = (state: ReduxState): Props => ({\n  addressesPrediction: state.addressesPrediction,\n  deals: state.deals,\n  position: state.position,\n  selectedAddress: state.selectedAddress\n});\n\nexport default connect(mapStateToProps, {\n  setAddressPrediction,\n  setDeals,\n  setGeolocation,\n  setLoadingPosition\n})(LandingPage);\n","import Deal, { Address, GetDealResponse, Coordinate } from \"../../modal/deal\";\nimport CurrentArea from \"../../modal/currentArea\";\nimport { ReduxActopnTypes } from \"./action\";\n\nexport interface ReduxState {\n  addressesPrediction: Address[];\n  deals: Deal[];\n  isLoadingPosition: boolean;\n  position: CurrentArea;\n  selectedAddress: Address;\n}\n\nconst initialState: ReduxState = {\n  addressesPrediction: [],\n  deals: [],\n  isLoadingPosition: true,\n  position: {\n    areaName: \"\",\n    coordinate: {\n      latitude: 0,\n      longitude: 0\n    }\n  },\n  selectedAddress: {\n    area: \"\",\n    street1: \"\",\n    street2: \"\",\n    city: \"\",\n    state: \"\",\n    country: \"\",\n    zipCode: \"\"\n  }\n};\n\nexport default function(state: ReduxState = initialState, action: any) {\n  console.log(\"Redux\", action.type);\n  switch (action.type) {\n    case ReduxActopnTypes.SET_ADDRESS_PREDICTION:\n      return setAddressPrediction(state, action.payload);\n    case ReduxActopnTypes.SET_DEALS:\n      return setDeals(state, action.payload);\n    case ReduxActopnTypes.SET_GEOLOCATION:\n      return setPosition(state, action.payload);\n    case ReduxActopnTypes.SET_LOADING_POSITION:\n      return setLoadingPosition(state, action.payload);\n    case ReduxActopnTypes.SET_SELECTED_ADDRESS:\n      return setSelectedAddress(state, action.payload);\n    default:\n      return state;\n  }\n}\n\nconst setAddressPrediction = (\n  state: ReduxState,\n  addressesPrediction: Address[]\n) => {\n  return {\n    ...state,\n    addressesPrediction\n  };\n};\n\nconst setDeals = (\n  state: ReduxState,\n  getDealsResponse: GetDealResponse\n): ReduxState => {\n  return {\n    ...state,\n    deals: getDealsResponse.deals\n  };\n};\n\nconst setLoadingPosition = (\n  state: ReduxState,\n  isLoadingPosition: boolean\n): ReduxState => {\n  return {\n    ...state,\n    isLoadingPosition\n  };\n};\n\nconst setPosition = (state: ReduxState, coordinate: Coordinate): ReduxState => {\n  return {\n    ...state,\n    position: {\n      coordinate\n    }\n  };\n};\n\nconst setSelectedAddress = (\n  state: ReduxState,\n  selectedAddress: Address\n): ReduxState => {\n  return {\n    ...state,\n    selectedAddress\n  };\n};\n","import reducers from \"./reducers\";\nimport { createStore, applyMiddleware } from \"redux\";\nimport thunk from \"redux-thunk\";\n\nconst initialState = {};\nconst middleWare = [thunk];\nexport const store = createStore(reducers, applyMiddleware(...middleWare));\n","import React from \"react\";\nimport ApplicationComponent from \"../../common/applicationComponent\";\nimport \"../../App.css\";\n\nexport default class Header extends ApplicationComponent {\n  render() {\n    return (\n      <header className=\"App-header\">\n        <p>{this.appContext.labels.title}</p>\n      </header>\n    );\n  }\n}\n","import React from \"react\";\nimport \"./App.css\";\nimport { LandingPage } from \"./component/landingPage\";\nimport { Provider } from \"react-redux\";\nimport { store } from \"./common/redux/store\";\nimport Header from \"./component/header/header\";\nconst App: React.FC = () => {\n  return (\n    <Provider store={store}>\n      <div className=\"App\">\n        <Header />\n        <LandingPage />\n      </div>\n    </Provider>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}