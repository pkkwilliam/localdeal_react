{"version":3,"sources":["lazyLoad/lazyLoadComponent.ts","lazyLoad/lazyLoad.ts","modal/oAuthProvider.ts","common/context/appState.ts","common/context/globalStateComponent.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["LazyLoadComponent","getLazyComponent","component","React","lazy","Announcement","Banner","CollapseCard","CreateDeal","Drawer","Header","HeaderMenu","LandingPage","Modal","Slide","getPath","OAuthProvider","createContext","GlobalStateComponent","props","removeUserProfile","userProfile","id","dealCreated","likedSum","imageUrl","name","oAuthProvider","NONE","setState","user","state","setDeals","deals","deal","setShowBanner","show","banner","setBannerProgressMessage","progressMessage","setGeolocation","coordinate","position","setLoadingPosition","loadingPosition","setPredicteAddresses","addressesPrediction","address","setSelectedAddress","selectedAddress","setServiceUp","serviceUp","service","setUserProfile","area","street1","street2","city","country","zipCode","latitude","longitude","this","Provider","value","children","Component","App","fallback","className","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.47397381.chunk.js","sourcesContent":["export enum LazyLoadComponent {\n  Announcement = \"Announcement\",\n  Banner = \"Banner\",\n  CollapseCard = \"CollapseCard\",\n  CreateDeal = \"CreateDeal\",\n  Drawer = \"Drawer\",\n  Header = \"Header\",\n  HeaderMenu = \"HeaderMenu\",\n  LandingPage = \"LandingPage\",\n  Modal = \"Modal\",\n  Slide = \"Slide\",\n}\n","import React from \"react\";\nimport { LazyLoadComponent } from \"./lazyLoadComponent\";\n\nexport const getLazyComponent = (component: LazyLoadComponent) => {\n  return React.lazy(() => getPath(component));\n};\n\nfunction getPath(component: LazyLoadComponent): any {\n  switch (component) {\n    case LazyLoadComponent.Announcement:\n      return import(\"../component/announcement/announcement\");\n    case LazyLoadComponent.Banner:\n      return import(\"../component/banner/banner\");\n    case LazyLoadComponent.CollapseCard:\n      return import(\"../common/collapseCard\");\n    case LazyLoadComponent.CreateDeal:\n      return import(\n        \"../component/createDealLandingPage/createDealLandingPage.v2\"\n      );\n    case LazyLoadComponent.Drawer:\n      return import(\"../common/drawer\");\n    case LazyLoadComponent.Header:\n      return import(\"../component/header/header\");\n    case LazyLoadComponent.HeaderMenu:\n      return import(\"../component/menu/headerMenu\");\n    case LazyLoadComponent.LandingPage:\n      return import(\"../component/landingPage/landingPage\");\n    case LazyLoadComponent.Modal:\n      return import(\"../common/modal\");\n    case LazyLoadComponent.Slide:\n      return import(\"../common/slide/slide\");\n  }\n}\n","export interface OAuthDetail {\n  iconUrl: string;\n  provider: OAuthProvider;\n  requestUrl: string;\n  requestUrlNonProd: string;\n}\n\nexport enum OAuthProvider {\n  GOOGLE = \"GOOGLE\",\n  WECHAT = \"WECHAT\",\n  NONE = \"NONE\",\n}\n","import React from \"react\";\n\nexport default React.createContext({});\n","import React, { Component } from \"react\";\nimport AppState from \"./appState\";\nimport Deal, { Address, Coordinate } from \"../../modal/deal\";\nimport { UserProfile } from \"../../modal/userProfile\";\nimport { OAuthProvider } from \"../../modal/oAuthProvider\";\n\nexport interface State {\n  address: {\n    addressesPrediction: Address[];\n    selectedAddress: Address;\n  };\n  banner: {\n    show: boolean;\n    progressMessage: string;\n  };\n  deal: {\n    dealDraft?: Deal;\n    deals: Deal[];\n  };\n  position: {\n    loadingPosition: boolean;\n    coordinate?: Coordinate;\n  };\n  service: {\n    serviceUp: boolean;\n  };\n  user: {\n    userProfile?: UserProfile;\n  };\n}\n\nexport default class GlobalStateComponent extends Component<{}, State> {\n  constructor(props: {}) {\n    super(props);\n    this.state = {\n      address: {\n        addressesPrediction: [],\n        selectedAddress: {\n          area: \"\",\n          street1: \"\",\n          street2: \"\",\n          city: \"\",\n          state: \"\",\n          country: \"\",\n          zipCode: \"\",\n        },\n      },\n      banner: {\n        show: false,\n        progressMessage: \"\",\n      },\n      deal: {\n        deals: [],\n      },\n      position: {\n        loadingPosition: true,\n        coordinate: {\n          latitude: 0,\n          longitude: 0,\n        },\n      },\n      service: {\n        serviceUp: true,\n      },\n      user: {\n        userProfile: {\n          id: 0,\n          dealCreated: [],\n          likedSum: 0,\n          name: \"\",\n          imageUrl: \"\",\n          oAuthProvider: OAuthProvider.NONE,\n        },\n      },\n    };\n  }\n\n  render() {\n    const { address, banner, deal, service, position, user } = this.state;\n    return (\n      <AppState.Provider\n        value={{\n          address: {\n            ...address,\n            setSelectedAddress: this.setSelectedAddress,\n            setPredicteAddresses: this.setPredicteAddresses,\n          },\n          banner: {\n            ...banner,\n            setShowBanner: this.setShowBanner,\n            setBannerProgressMessage: this.setBannerProgressMessage,\n          },\n          deal: { ...deal, setDeals: this.setDeals },\n          position: {\n            ...position,\n            setGeolocation: this.setGeolocation,\n            setLoadingPosition: this.setLoadingPosition,\n          },\n          service: {\n            ...service,\n            setServiceUp: this.setServiceUp,\n          },\n          user: {\n            ...user,\n            removeUserProfile: this.removeUserProfile,\n            setUserProfile: this.setUserProfile,\n          },\n        }}\n      >\n        {this.props.children}\n      </AppState.Provider>\n    );\n  }\n\n  protected removeUserProfile = () => {\n    const userProfile: UserProfile = {\n      id: 0,\n      dealCreated: [],\n      likedSum: 0,\n      imageUrl: \"\",\n      name: \"\",\n      oAuthProvider: OAuthProvider.NONE,\n    };\n    this.setState({\n      user: {\n        ...this.state.user,\n        userProfile,\n      },\n    });\n  };\n\n  protected setDeals = (deals: Deal[]) => {\n    this.setState({\n      deal: { ...this.state.deal, deals },\n    });\n  };\n\n  protected setShowBanner = (show: boolean) => {\n    this.setState({\n      banner: { ...this.state.banner, show },\n    });\n  };\n\n  protected setBannerProgressMessage = (progressMessage: string) => {\n    this.setState({\n      banner: { ...this.state.banner, progressMessage },\n    });\n  };\n\n  protected setGeolocation = (coordinate: Coordinate) => {\n    this.setState({\n      position: { ...this.state.position, coordinate },\n    });\n  };\n\n  protected setLoadingPosition = (loadingPosition: boolean) => {\n    this.setState({\n      position: { ...this.state.position, loadingPosition },\n    });\n  };\n\n  protected setPredicteAddresses = (addressesPrediction: Address[]) => {\n    this.setState({\n      address: { ...this.state.address, addressesPrediction },\n    });\n  };\n\n  protected setSelectedAddress = (selectedAddress: Address) => {\n    this.setState({\n      address: { ...this.state.address, selectedAddress },\n    });\n  };\n\n  protected setServiceUp = (serviceUp: boolean) => {\n    this.setState({\n      service: { ...this.state.service, serviceUp },\n    });\n  };\n\n  protected setUserProfile = (userProfile: UserProfile) => {\n    this.setState({\n      user: { ...this.state.user, userProfile },\n    });\n  };\n}\n","import React, { Suspense, Component } from \"react\";\nimport \"./App.css\";\nimport GlobalStateComponent from \"./common/context/globalStateComponent\";\nimport { LazyLoadComponent } from \"./lazyLoad/lazyLoadComponent\";\nimport { getLazyComponent } from \"./lazyLoad/lazyLoad\";\nimport \"slick-carousel/slick/slick.css\";\nimport \"slick-carousel/slick/slick-theme.css\";\n\nconst Announcement = getLazyComponent(LazyLoadComponent.Announcement);\nconst Banner = getLazyComponent(LazyLoadComponent.Banner);\nconst Header = getLazyComponent(LazyLoadComponent.Header);\nconst LandingPage = getLazyComponent(LazyLoadComponent.LandingPage);\n\nexport default class App extends Component {\n  render() {\n    return (\n      <GlobalStateComponent>\n        <Suspense fallback={<></>}>\n          <div className=\"App-header\">\n            <Header />\n          </div>\n          <Announcement />\n          <Banner />\n          <div className=\"Content\">\n            <LandingPage />\n          </div>\n        </Suspense>\n      </GlobalStateComponent>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}