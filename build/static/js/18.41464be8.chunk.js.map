{"version":3,"sources":["common/modal.tsx","common/h1.tsx","common/textButton.tsx"],"names":["Modal","ButtonSelection","props","primaryButtonMessage","secondaryButtonMessage","onClickPrimaryButton","buttonType","onClick","message","this","style","styles","rootContainer","contentContainer","messageTextContainer","borderTop","isFlexDirectionRow","buttonsContainer","Component","alignItems","borderColor","styleSchema","color","greyTransparent","justifyContent","marginLeft","marginRight","width","dimension","FILL_ALL_WIDTH","button","primaryColor","padding","borderRadius","backgroundColor","white","outline","paddingBottom","paddingTop","display","H1","getColor","getDefaultStyle","children","secondaryColor","black","getDefaultColor","defaultStyle","getStyle","text","margin","fontFamily","font","primaryFont","fontSize","fontWeight","TextButton","additionalStyle","underline","buttonStyle","variant","marginBottom","marginTop","textDecoration"],"mappings":"yPAkBqBA,E,2MAqBnBC,gBAAkB,WAChB,IAAMC,EAAQ,EAAKA,MACnB,OAAIA,EAAMC,sBAAwBD,EAAME,uBAC/B,qCACEF,EAAMG,sBAAwBH,EAAMC,qBAE3C,kBAAC,IAAD,CACEG,WAAW,UACXC,QAASL,EAAMG,qBACfG,QAASN,EAAMC,uBAIZ,M,wEAhCT,IAAMD,EAAQO,KAAKP,MACnB,OACE,kBAAC,IAAD,eAAiBQ,MAAOC,EAAOC,eAAmBH,KAAKP,OACrD,kBAAC,IAAD,CAAMQ,MAAOC,EAAOE,kBAClB,kBAAC,IAAD,CAAMH,MAAOC,EAAOG,sBAClB,kBAAC,IAAD,KAAKZ,EAAMM,UAEb,kBAAC,IAAD,CACEO,UAAW,EACXC,oBAAkB,EAClBN,MAAOC,EAAOM,kBAEd,uBAAMhB,gBAAN,a,GAduBiB,aAuC7BP,EAAS,CACbM,iBAAkB,CAChBE,WAAY,SACZC,YAAaC,IAAYC,MAAMC,gBAC/BC,eAAgB,SAChBC,WAAY,GACZC,YAAa,GACbC,MAAON,IAAYO,UAAUC,gBAE/BC,OAAQ,CACNR,MAAOD,IAAYC,MAAMS,aACzBC,QAAS,GACTL,MAAO,WAETd,iBAAkB,CAChBM,WAAY,SACZc,aAAc,GACdC,gBAAiBb,IAAYC,MAAMa,MACnCX,eAAgB,SAChBY,QAAS,OACTT,MAAO,WAETb,qBAAsB,CACpBK,WAAY,SACZa,QAAS,GACTK,cAAe,GACfC,WAAY,IAEd1B,cAAe,CACbO,WAAY,SACZoB,QAAS,OACTf,eAAgB,Y,wIChFCgB,E,iLAIjB,OACE,0BACE9B,MAAK,aACHY,MAAOb,KAAKgC,YACThC,KAAKiC,kBAFL,GAGAjC,KAAKP,MAAMQ,QAGfD,KAAKP,MAAMyC,Y,iCAMhB,OAAQlC,KAAKP,MAAMoB,OACjB,IAAK,UACH,OAAOX,EAAOoB,aAAaT,MAC7B,IAAK,YACH,OAAOX,EAAOiC,eAAetB,MAC/B,IAAK,QACH,OAAOX,EAAOkC,MAAMvB,MACtB,IAAK,QACH,OAAOX,EAAOwB,MAAMb,MACtB,QACE,OAAOb,KAAKqC,qB,wCAKhB,OAAOnC,EAAOkC,MAAMvB,Q,wCAIpB,OAAO,eAAKX,EAAOoC,aAAnB,GAAoCtC,KAAKuC,c,iCAIzC,OAAOrC,EAAOsC,S,GAzCgD/B,aA6C5DP,EAAS,CACboC,aAAc,CACZG,OAAQ,GAEVD,KAAM,CACJE,WAAY9B,IAAY+B,KAAKC,YAC7BC,SAAU,GACVC,WAAY,KAEdxB,aAAc,CACZT,MAAOD,IAAYC,MAAMS,cAE3Ba,eAAgB,CACdtB,MAAOD,IAAYC,MAAMsB,gBAE3BC,MAAO,CACLvB,MAAOD,IAAYC,MAAMuB,OAE3BV,MAAO,CACLb,MAAOD,IAAYC,MAAMa,S,iJC7DRqB,E,iLAEjB,IAAMC,EAAkBhD,KAAKP,MAAMwD,UAAY/C,EAAO+C,UAAY,GAC5DpC,EAAQ,CACZA,MAC4B,YAA1Bb,KAAKP,MAAMI,WACPe,IAAYC,MAAMS,aAClBV,IAAYC,MAAMsB,gBAG1B,OACE,kBAAC,IAAD,eACErC,QAASE,KAAKP,MAAMK,QACpBG,MAAK,eAAOY,EAAP,GAAiBX,EAAOgD,YAAxB,GAAwCF,GAC7CG,QAAQ,QACJnD,KAAKP,OAERO,KAAKP,MAAMM,a,GAjBoBU,aAuBlCP,EAAS,CACbgD,YAAa,CACXE,aAAc,EACdC,UAAW,EACXzB,cAAe,EACfC,WAAY,GAEdoB,UAAW,CACTK,eAAgB","file":"static/js/18.41464be8.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport {\n  default as MaterialUIModal,\n  ModalProps,\n} from \"@material-ui/core/Modal\";\nimport View from \"./view\";\nimport { styleSchema } from \"./stylesheet\";\nimport H1 from \"./h1\";\nimport TextButton from \"./textButton\";\n\ninterface Props extends ModalProps {\n  onClickPrimaryButton?: () => void;\n  onClickSecondaryButton?: () => void;\n  primaryButtonMessage: string;\n  message: string;\n  secondaryButtonMessage?: string;\n}\n\nexport default class Modal extends Component<Props> {\n  render() {\n    const props = this.props;\n    return (\n      <MaterialUIModal style={styles.rootContainer} {...this.props}>\n        <View style={styles.contentContainer}>\n          <View style={styles.messageTextContainer}>\n            <H1>{props.message}</H1>\n          </View>\n          <View\n            borderTop={1}\n            isFlexDirectionRow\n            style={styles.buttonsContainer}\n          >\n            <this.ButtonSelection />\n          </View>\n        </View>\n      </MaterialUIModal>\n    );\n  }\n\n  ButtonSelection = () => {\n    const props = this.props;\n    if (props.primaryButtonMessage && props.secondaryButtonMessage) {\n      return <></>;\n    } else if (props.onClickPrimaryButton && props.primaryButtonMessage) {\n      return (\n        <TextButton\n          buttonType=\"primary\"\n          onClick={props.onClickPrimaryButton}\n          message={props.primaryButtonMessage}\n        />\n      );\n    } else {\n      return null;\n    }\n  };\n}\n\nconst styles = {\n  buttonsContainer: {\n    alignItems: \"center\",\n    borderColor: styleSchema.color.greyTransparent,\n    justifyContent: \"center\",\n    marginLeft: 10,\n    marginRight: 10,\n    width: styleSchema.dimension.FILL_ALL_WIDTH,\n  },\n  button: {\n    color: styleSchema.color.primaryColor,\n    padding: 10,\n    width: \"inherit\",\n  },\n  contentContainer: {\n    alignItems: \"center\",\n    borderRadius: 10,\n    backgroundColor: styleSchema.color.white,\n    justifyContent: \"center\",\n    outline: \"none\",\n    width: \"inherit\",\n  },\n  messageTextContainer: {\n    alignItems: \"center\",\n    padding: 35,\n    paddingBottom: 20,\n    paddingTop: 20,\n  },\n  rootContainer: {\n    alignItems: \"center\",\n    display: \"flex\",\n    justifyContent: \"center\",\n  },\n};\n","import React, { Component } from \"react\";\nimport { styleSchema } from \"./stylesheet\";\n\nexport interface Props {\n  color?: \"primary\" | \"secondary\" | \"black\" | \"white\";\n  style?: any;\n}\n\nexport default class H1<ChildProps extends Props = Props> extends Component<\n  ChildProps\n> {\n  render() {\n    return (\n      <span\n        style={{\n          color: this.getColor(),\n          ...this.getDefaultStyle(),\n          ...this.props.style,\n        }}\n      >\n        {this.props.children}\n      </span>\n    );\n  }\n\n  protected getColor(): string {\n    switch (this.props.color) {\n      case \"primary\":\n        return styles.primaryColor.color;\n      case \"secondary\":\n        return styles.secondaryColor.color;\n      case \"black\":\n        return styles.black.color;\n      case \"white\":\n        return styles.white.color;\n      default:\n        return this.getDefaultColor();\n    }\n  }\n\n  protected getDefaultColor() {\n    return styles.black.color;\n  }\n\n  protected getDefaultStyle() {\n    return { ...styles.defaultStyle, ...this.getStyle() };\n  }\n\n  protected getStyle(): any {\n    return styles.text;\n  }\n}\n\nconst styles = {\n  defaultStyle: {\n    margin: 0,\n  },\n  text: {\n    fontFamily: styleSchema.font.primaryFont,\n    fontSize: 18,\n    fontWeight: 600,\n  },\n  primaryColor: {\n    color: styleSchema.color.primaryColor,\n  },\n  secondaryColor: {\n    color: styleSchema.color.secondaryColor,\n  },\n  black: {\n    color: styleSchema.color.black,\n  },\n  white: {\n    color: styleSchema.color.white,\n  },\n};\n","import React, { Component } from \"react\";\nimport { Button, ButtonProps } from \"@material-ui/core\";\nimport { styleSchema } from \"./stylesheet\";\n\ninterface Props extends ButtonProps {\n  buttonType: \"primary\" | \"secondary\";\n  onClick: () => void;\n  message: string;\n  underline?: boolean;\n}\n\nexport default class TextButton extends Component<Props> {\n  render() {\n    const additionalStyle = this.props.underline ? styles.underline : \"\";\n    const color = {\n      color:\n        this.props.buttonType === \"primary\"\n          ? styleSchema.color.primaryColor\n          : styleSchema.color.secondaryColor,\n    };\n\n    return (\n      <Button\n        onClick={this.props.onClick}\n        style={{ ...color, ...styles.buttonStyle, ...additionalStyle }}\n        variant=\"text\"\n        {...this.props}\n      >\n        {this.props.message}\n      </Button>\n    );\n  }\n}\n\nconst styles = {\n  buttonStyle: {\n    marginBottom: 5,\n    marginTop: 5,\n    paddingBottom: 5,\n    paddingTop: 5,\n  },\n  underline: {\n    textDecoration: \"underline\",\n  },\n};\n"],"sourceRoot":""}