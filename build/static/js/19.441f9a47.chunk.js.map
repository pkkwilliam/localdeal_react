{"version":3,"sources":["common/modal.tsx","common/h1.tsx"],"names":["Modal","Button","message","onClick","style","styles","button","ButtonSelection","props","primaryButtonMessage","secondaryButtonMessage","onClickPrimaryButton","this","rootContainer","contentContainer","messageTextContainer","borderTop","isFlexDirectionRow","buttonsContainer","Component","alignItems","borderColor","styleSchema","color","greyTransparent","justifyContent","marginLeft","marginRight","width","dimension","FILL_ALL_WIDTH","primaryColor","padding","borderRadius","backgroundColor","white","outline","paddingBottom","paddingTop","display","H1","getDefaultStyle","getDefaultColor","children","getColor","secondaryColor","black","defaultStyle","getStyle","text","margin","fontFamily","font","primaryFont","fontSize","fontWeight"],"mappings":"0PAkBqBA,E,2MAqBnBC,OAAS,YAAqE,IAAlEC,EAAiE,EAAjEA,QAASC,EAAwD,EAAxDA,QACnB,OACE,kBAAC,IAAD,CAAQA,QAASA,EAASC,MAAOC,EAAOC,QACrCJ,I,EAKPK,gBAAkB,WAChB,IAAMC,EAAQ,EAAKA,MACnB,OAAIA,EAAMC,sBAAwBD,EAAME,uBAC/B,qCACEF,EAAMC,qBAEb,kBAAC,IAAD,CAAQN,QAASK,EAAMG,qBAAsBP,MAAOC,EAAOC,QACxDE,EAAMC,sBAIJ,M,wEAtCT,IAAMD,EAAQI,KAAKJ,MACnB,OACE,kBAAC,IAAD,eAAiBJ,MAAOC,EAAOQ,eAAmBD,KAAKJ,OACrD,kBAAC,IAAD,CAAMJ,MAAOC,EAAOS,kBAClB,kBAAC,IAAD,CAAMV,MAAOC,EAAOU,sBAClB,kBAAC,IAAD,KAAKP,EAAMN,UAEb,kBAAC,IAAD,CACEc,UAAW,EACXC,oBAAkB,EAClBb,MAAOC,EAAOa,kBAEd,uBAAMX,gBAAN,a,GAduBY,aA6C7Bd,EAAS,CACba,iBAAkB,CAChBE,WAAY,SACZC,YAAaC,IAAYC,MAAMC,gBAC/BC,eAAgB,SAChBC,WAAY,GACZC,YAAa,GACbC,MAAON,IAAYO,UAAUC,gBAE/BxB,OAAQ,CACNiB,MAAOD,IAAYC,MAAMQ,aACzBC,QAAS,GACTJ,MAAO,WAETd,iBAAkB,CAChBM,WAAY,SACZa,aAAc,GACdC,gBAAiBZ,IAAYC,MAAMY,MACnCV,eAAgB,SAChBW,QAAS,OACTR,MAAO,WAETb,qBAAsB,CACpBK,WAAY,SACZY,QAAS,GACTK,cAAe,GACfC,WAAY,IAEdzB,cAAe,CACbO,WAAY,SACZmB,QAAS,OACTd,eAAgB,Y,wICtFCe,E,iLAIjB,OACE,uBACEpC,MAAK,eACAQ,KAAK6B,kBADL,GAEA7B,KAAK8B,kBAFL,GAGA9B,KAAKJ,MAAMJ,QAGfQ,KAAKJ,MAAMmC,Y,wCAMhB,MAAO,CACLpB,MAAOX,KAAKgC,c,iCAKd,OAAQhC,KAAKJ,MAAMe,OACjB,IAAK,UACH,OAAOlB,EAAO0B,aAAaR,MAC7B,IAAK,YACH,OAAOlB,EAAOwC,eAAetB,MAC/B,IAAK,QACH,OAAOlB,EAAOyC,MAAMvB,MACtB,IAAK,QACH,OAAOlB,EAAO8B,MAAMZ,MACtB,QACE,OAAOlB,EAAOyC,MAAMvB,S,wCAKxB,OAAO,eAAKlB,EAAO0C,aAAnB,GAAoCnC,KAAKoC,c,iCAIzC,OAAO3C,EAAO4C,S,GA3CgD9B,aA+C5Dd,EAAS,CACb0C,aAAc,CACZG,OAAQ,GAEVD,KAAM,CACJE,WAAY7B,IAAY8B,KAAKC,YAC7BC,SAAU,GACVC,WAAY,KAEdxB,aAAc,CACZR,MAAOD,IAAYC,MAAMQ,cAE3Bc,eAAgB,CACdtB,MAAOD,IAAYC,MAAMsB,gBAE3BC,MAAO,CACLvB,MAAOD,IAAYC,MAAMuB,OAE3BX,MAAO,CACLZ,MAAOD,IAAYC,MAAMY","file":"static/js/19.441f9a47.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport {\n  default as MaterialUIModal,\n  ModalProps,\n} from \"@material-ui/core/Modal\";\nimport View from \"./view\";\nimport { styleSchema } from \"./stylesheet\";\nimport H1 from \"./h1\";\nimport Button from \"@material-ui/core/Button\";\n\ninterface Props extends ModalProps {\n  onClickPrimaryButton?: () => void;\n  onClickSecondaryButton?: () => void;\n  primaryButtonMessage: string;\n  message: string;\n  secondaryButtonMessage?: string;\n}\n\nexport default class Modal extends Component<Props> {\n  render() {\n    const props = this.props;\n    return (\n      <MaterialUIModal style={styles.rootContainer} {...this.props}>\n        <View style={styles.contentContainer}>\n          <View style={styles.messageTextContainer}>\n            <H1>{props.message}</H1>\n          </View>\n          <View\n            borderTop={1}\n            isFlexDirectionRow\n            style={styles.buttonsContainer}\n          >\n            <this.ButtonSelection />\n          </View>\n        </View>\n      </MaterialUIModal>\n    );\n  }\n\n  Button = ({ message, onClick }: { message: string; onClick: () => void }) => {\n    return (\n      <Button onClick={onClick} style={styles.button}>\n        {message}\n      </Button>\n    );\n  };\n\n  ButtonSelection = () => {\n    const props = this.props;\n    if (props.primaryButtonMessage && props.secondaryButtonMessage) {\n      return <></>;\n    } else if (props.primaryButtonMessage) {\n      return (\n        <Button onClick={props.onClickPrimaryButton} style={styles.button}>\n          {props.primaryButtonMessage}\n        </Button>\n      );\n    } else {\n      return null;\n    }\n  };\n}\n\nconst styles = {\n  buttonsContainer: {\n    alignItems: \"center\",\n    borderColor: styleSchema.color.greyTransparent,\n    justifyContent: \"center\",\n    marginLeft: 10,\n    marginRight: 10,\n    width: styleSchema.dimension.FILL_ALL_WIDTH,\n  },\n  button: {\n    color: styleSchema.color.primaryColor,\n    padding: 10,\n    width: \"inherit\",\n  },\n  contentContainer: {\n    alignItems: \"center\",\n    borderRadius: 10,\n    backgroundColor: styleSchema.color.white,\n    justifyContent: \"center\",\n    outline: \"none\",\n    width: \"inherit\",\n  },\n  messageTextContainer: {\n    alignItems: \"center\",\n    padding: 35,\n    paddingBottom: 20,\n    paddingTop: 20,\n  },\n  rootContainer: {\n    alignItems: \"center\",\n    display: \"flex\",\n    justifyContent: \"center\",\n  },\n};\n","import React, { Component } from \"react\";\nimport { styleSchema } from \"./stylesheet\";\n\nexport interface Props {\n  color?: \"primary\" | \"secondary\" | \"black\" | \"white\";\n  style?: any;\n}\n\nexport default class H1<ChildProps extends Props = Props> extends Component<\n  ChildProps\n> {\n  render() {\n    return (\n      <p\n        style={{\n          ...this.getDefaultStyle(),\n          ...this.getDefaultColor(),\n          ...this.props.style,\n        }}\n      >\n        {this.props.children}\n      </p>\n    );\n  }\n\n  protected getDefaultColor(): { color: string } {\n    return {\n      color: this.getColor(),\n    };\n  }\n\n  protected getColor(): string {\n    switch (this.props.color) {\n      case \"primary\":\n        return styles.primaryColor.color;\n      case \"secondary\":\n        return styles.secondaryColor.color;\n      case \"black\":\n        return styles.black.color;\n      case \"white\":\n        return styles.white.color;\n      default:\n        return styles.black.color;\n    }\n  }\n\n  protected getDefaultStyle() {\n    return { ...styles.defaultStyle, ...this.getStyle() };\n  }\n\n  protected getStyle(): any {\n    return styles.text;\n  }\n}\n\nconst styles = {\n  defaultStyle: {\n    margin: 0,\n  },\n  text: {\n    fontFamily: styleSchema.font.primaryFont,\n    fontSize: 18,\n    fontWeight: 600,\n  },\n  primaryColor: {\n    color: styleSchema.color.primaryColor,\n  },\n  secondaryColor: {\n    color: styleSchema.color.secondaryColor,\n  },\n  black: {\n    color: styleSchema.color.black,\n  },\n  white: {\n    color: styleSchema.color.white,\n  },\n};\n"],"sourceRoot":""}