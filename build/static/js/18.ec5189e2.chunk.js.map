{"version":3,"sources":["resouces/logo_icon_character-min.png","common/ToolTips.tsx","component/header/header.view.tsx","component/header/header.tsx"],"names":["module","exports","ToolTips","Tooltip","disableTouchListener","title","this","props","Button","style","padding","minWidth","children","Component","CreateDealComponent","getLazyComponent","LazyLoadComponent","CreateDeal","Drawer","Modal","HeaderView","CreateDealDrawer","anchor","onClose","onCloseCreateDeal","open","isCreateDealDrawerOpen","CreateNewDealButton","onClick","onClickCreateDeal","styles","createNewDealIcon","ServerErrorModal","serverUp","label","appContext","labels","header","primaryButtonMessage","ok","message","serverError","HeaderTextAndLogo","alt","src","logo","width","LocationButton","areaLabel","selectedAddress","area","loading","currentLocation","locationIcon","TopBarSection","HeaderMenu","isFlexDirectionRow","buttonContainer","boxShadow","rootContainer","ApplicationComponent","alignItems","justifyContent","color","styleSchema","primaryColor","icon","greenMedium","backgroundColor","white","borderColor","greyDark","Header","console","debug","setState","state","isHamburgerMenuDrawerOpen","useAutoLocation","executeInit","appState","address","service","serviceUp"],"mappings":"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","file":"static/js/18.ec5189e2.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo_icon_character-min.f8d459b6.png\";","import React, { Component } from \"react\";\nimport Button from \"@material-ui/core/Button\";\nimport Tooltip from \"@material-ui/core/Tooltip\";\n\ninterface Props {\n  children: React.ReactNode;\n  title: string;\n}\n\nexport default class ToolTips extends Component<Props> {\n  render() {\n    return (\n      <Tooltip disableTouchListener title={this.props.title}>\n        <Button style={{ padding: 0, minWidth: 0 }}>\n          {this.props.children}\n        </Button>\n      </Tooltip>\n    );\n  }\n}\n","import React from \"react\";\nimport ApplicationComponent from \"../../common/applicationComponent\";\nimport \"../../App.css\";\nimport { Address } from \"../../modal/deal\";\nimport View from \"../../common/view\";\nimport { styleSchema } from \"../../common/stylesheet\";\nimport logo from \"../../resouces/logo_icon_character-min.png\";\nimport { default as AddIcon } from \"@material-ui/icons/Add\";\nimport { default as LocationIcon } from \"@material-ui/icons/Room\";\nimport ToolTips from \"../../common/ToolTips\";\nimport { getLazyComponent } from \"../../lazyLoad/lazyLoad\";\nimport { LazyLoadComponent } from \"../../lazyLoad/lazyLoadComponent\";\n\nexport interface Props {\n  isCreateDealDrawerOpen: boolean;\n  onClickCreateDeal: () => void;\n  onCloseCreateDeal: () => void;\n  selectedAddress?: Address;\n  serverUp: boolean;\n}\n\nconst CreateDealComponent = getLazyComponent(LazyLoadComponent.CreateDeal);\nconst Drawer = getLazyComponent(LazyLoadComponent.Drawer);\nconst Modal = getLazyComponent(LazyLoadComponent.Modal);\n\nexport default class HeaderView extends ApplicationComponent<Props> {\n  render() {\n    return (\n      <>\n        <View\n          boxShadow={1}\n          isFlexDirectionRow={true}\n          style={styles.rootContainer}\n        >\n          <this.ServerErrorModal />\n          <this.CreateDealDrawer />\n          <this.HeaderTextAndLogo />\n          <this.TopBarSection />\n        </View>\n      </>\n    );\n  }\n\n  CreateDealDrawer = () => {\n    return (\n      <Drawer\n        anchor={\"top\"}\n        onClose={this.props.onCloseCreateDeal}\n        open={this.props.isCreateDealDrawerOpen}\n      >\n        <CreateDealComponent onClose={this.props.onCloseCreateDeal} />\n      </Drawer>\n    );\n  };\n\n  CreateNewDealButton = () => {\n    return (\n      <AddIcon\n        onClick={this.props.onClickCreateDeal}\n        style={styles.createNewDealIcon}\n      />\n    );\n  };\n\n  ServerErrorModal = () => {\n    if (!this.props.serverUp) {\n      const label = this.appContext.labels.header;\n      return (\n        <Modal\n          primaryButtonMessage={label.ok}\n          message={label.serverError}\n          open={true}\n        ></Modal>\n      );\n    } else {\n      return null;\n    }\n  };\n\n  HeaderTextAndLogo = () => {\n    return (\n      <View>\n        <img alt={\"app-logo\"} src={logo} style={{ width: 100 }} />\n      </View>\n    );\n  };\n\n  LocationButton = () => {\n    const label = this.appContext.labels.header;\n    let areaLabel;\n    if (this.props.selectedAddress && this.props.selectedAddress.area) {\n      areaLabel = this.props.selectedAddress.area;\n    } else {\n      areaLabel = label.loading;\n    }\n    return (\n      <ToolTips title={`${label.currentLocation} ${areaLabel}`}>\n        <LocationIcon style={styles.locationIcon} />\n      </ToolTips>\n    );\n  };\n\n  TopBarSection = () => {\n    const HeaderMenu = getLazyComponent(LazyLoadComponent.HeaderMenu);\n    return (\n      <View isFlexDirectionRow={true} style={styles.buttonContainer}>\n        <this.CreateNewDealButton />\n        <this.LocationButton />\n        <HeaderMenu />\n      </View>\n    );\n  };\n}\n\nconst styles = {\n  buttonContainer: {\n    alignItems: \"center\",\n    justifyContent: \"space-between\",\n  },\n  createNewDealIcon: {\n    color: styleSchema.color.primaryColor,\n    ...styleSchema.icon,\n  },\n  locationIcon: {\n    color: styleSchema.color.greenMedium,\n    ...styleSchema.icon,\n  },\n  rootContainer: {\n    alignItems: \"center\",\n    backgroundColor: styleSchema.color.white,\n    borderColor: styleSchema.color.greyDark,\n    justifyContent: \"space-between\",\n    padding: 15,\n  },\n};\n","import React from \"react\";\nimport ApplicationComponent from \"../../common/applicationComponent\";\nimport \"../../App.css\";\nimport { HeaderView } from \".\";\n\ninterface State {\n  isCreateDealDrawerOpen: boolean;\n  isHamburgerMenuDrawerOpen: boolean;\n  useAutoLocation: boolean;\n}\n\nexport default class Header extends ApplicationComponent<{}, State> {\n  constructor(props: {}) {\n    super(props);\n    this.state = {\n      isCreateDealDrawerOpen: false,\n      isHamburgerMenuDrawerOpen: false,\n      useAutoLocation: true,\n    };\n  }\n\n  componentDidMount() {\n    this.executeInit();\n  }\n\n  render() {\n    return (\n      <HeaderView\n        isCreateDealDrawerOpen={this.state.isCreateDealDrawerOpen}\n        onClickCreateDeal={this.onClickCreateDeal}\n        onCloseCreateDeal={this.onCloseCreateDeal}\n        selectedAddress={this.appState.address.selectedAddress}\n        serverUp={this.appState.service.serviceUp}\n      />\n    );\n  }\n\n  protected onClickCreateDeal = () => {\n    console.debug(\"onClickCreateDeal\");\n    this.setState({\n      isCreateDealDrawerOpen: true,\n    });\n  };\n\n  protected onCloseCreateDeal = () => {\n    console.debug(\"onCloseCreateDeal\");\n    this.setState({\n      isCreateDealDrawerOpen: false,\n    });\n  };\n}\n"],"sourceRoot":""}