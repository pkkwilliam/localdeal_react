{"version":3,"sources":["common/modal.tsx","../node_modules/@material-ui/core/esm/utils/useForkRef.js","common/h1.tsx","../node_modules/@material-ui/core/esm/utils/setRef.js","../node_modules/@material-ui/core/esm/utils/useEventCallback.js"],"names":["Modal","props","this","style","styles","rootContainer","contentContainer","borderBottom","messageTextContainer","message","isFlexDirectionRow","Component","buttonStyle","alignItems","borderRadius","backgroundColor","styleSchema","color","white","justifyContent","width","borderColor","greyTransparent","padding","dimension","FILL_ALL_WIDTH","PrimaryButton","primaryColor","display","useForkRef","refA","refB","React","useMemo","refValue","setRef","H1","getDefaultStyle","getDefaultColor","children","getColor","secondaryColor","black","defaultStyle","getStyle","text","margin","fontFamily","font","primaryFont","fontSize","fontWeight","ref","value","current","useEnhancedEffect","window","useLayoutEffect","useEffect","useEventCallback","fn","useRef","useCallback","apply","arguments"],"mappings":"iPAmBqBA,E,iLAEjB,IAAMC,EAAQC,KAAKD,MACnB,OACE,kBAAC,IAAD,eAAiBE,MAAOC,EAAOC,eAAmBH,KAAKD,OACrD,kBAAC,IAAD,CAAME,MAAOC,EAAOE,kBAClB,kBAAC,IAAD,CAAMC,aAAc,EAAGJ,MAAOC,EAAOI,sBACnC,kBAAC,IAAD,KAAKP,EAAMQ,UAEb,kBAAC,IAAD,CAAMC,oBAAkB,U,GATCC,aAgB7BP,EAAS,CACbQ,YAAa,GACbN,iBAAkB,CAChBO,WAAY,SACZC,aAAc,GACdC,gBAAiBC,IAAYC,MAAMC,MACnCC,eAAgB,SAChBC,MAAO,WAETZ,qBAAsB,CACpBK,WAAY,SACZQ,YAAaL,IAAYC,MAAMK,gBAC/BC,QAAS,GACTH,MAAOJ,IAAYQ,UAAUC,gBAE/BC,cAAe,CACbX,gBAAiBC,IAAYC,MAAMU,cAGrCtB,cAAe,CACbQ,WAAY,SACZe,QAAS,OACTT,eAAgB,Y,gCCzDpB,8DAEe,SAASU,EAAWC,EAAMC,GAMvC,OAAOC,IAAMC,SAAQ,WACnB,OAAY,MAARH,GAAwB,MAARC,EACX,KAGF,SAAUG,GACfC,YAAOL,EAAMI,GACbC,YAAOJ,EAAMG,MAEd,CAACJ,EAAMC,M,wICTSK,E,iLAIjB,OACE,uBACEjC,MAAK,eACAD,KAAKmC,kBADL,GAEAnC,KAAKoC,kBAFL,GAGApC,KAAKD,MAAME,QAGfD,KAAKD,MAAMsC,Y,wCAMhB,MAAO,CACLtB,MAAOf,KAAKsC,c,iCAKd,OAAQtC,KAAKD,MAAMgB,OACjB,IAAK,UACH,OAAOb,EAAOuB,aAAaV,MAC7B,IAAK,YACH,OAAOb,EAAOqC,eAAexB,MAC/B,IAAK,QACH,OAAOb,EAAOsC,MAAMzB,MACtB,IAAK,QACH,OAAOb,EAAOc,MAAMD,MACtB,QACE,OAAOb,EAAOsC,MAAMzB,S,wCAKxB,OAAO,eAAKb,EAAOuC,aAAnB,GAAoCzC,KAAK0C,c,iCAIzC,OAAOxC,EAAOyC,S,GA3CgDlC,aA+C5DP,EAAS,CACbuC,aAAc,CACZG,OAAQ,GAEVD,KAAM,CACJE,WAAY/B,IAAYgC,KAAKC,YAC7BC,SAAU,GACVC,WAAY,KAEdxB,aAAc,CACZV,MAAOD,IAAYC,MAAMU,cAE3Bc,eAAgB,CACdxB,MAAOD,IAAYC,MAAMwB,gBAE3BC,MAAO,CACLzB,MAAOD,IAAYC,MAAMyB,OAE3BxB,MAAO,CACLD,MAAOD,IAAYC,MAAMC,S,gCCzEd,SAASiB,EAAOiB,EAAKC,GACf,oBAARD,EACTA,EAAIC,GACKD,IACTA,EAAIE,QAAUD,GALlB,mC,gCCAA,sDACIE,EAAsC,qBAAXC,OAAyBxB,IAAMyB,gBAAkBzB,IAAM0B,UAOvE,SAASC,EAAiBC,GACvC,IAAIR,EAAMpB,IAAM6B,OAAOD,GAIvB,OAHAL,GAAkB,WAChBH,EAAIE,QAAUM,KAET5B,IAAM8B,aAAY,WACvB,OAAWV,EAAIE,QAASS,WAAM,EAAQC,aACrC","file":"static/js/16.503f748d.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport {\n  default as MaterialUIModal,\n  ModalProps,\n} from \"@material-ui/core/Modal\";\nimport View from \"./view\";\nimport P from \"./paragraph\";\nimport { Button } from \"@material-ui/core\";\nimport { styleSchema } from \"./stylesheet\";\nimport H1 from \"./h1\";\n\ninterface Props extends ModalProps {\n  onClickPrimaryButton?: () => void;\n  onClickSecondaryButton?: () => void;\n  primaryButtonMessage: string;\n  message: string;\n  secondaryButtonMessage?: string;\n}\n\nexport default class Modal extends Component<Props> {\n  render() {\n    const props = this.props;\n    return (\n      <MaterialUIModal style={styles.rootContainer} {...this.props}>\n        <View style={styles.contentContainer}>\n          <View borderBottom={1} style={styles.messageTextContainer}>\n            <H1>{props.message}</H1>\n          </View>\n          <View isFlexDirectionRow></View>\n        </View>\n      </MaterialUIModal>\n    );\n  }\n}\n\nconst styles = {\n  buttonStyle: {},\n  contentContainer: {\n    alignItems: \"center\",\n    borderRadius: 10,\n    backgroundColor: styleSchema.color.white,\n    justifyContent: \"center\",\n    width: \"inherit\",\n  },\n  messageTextContainer: {\n    alignItems: \"center\",\n    borderColor: styleSchema.color.greyTransparent,\n    padding: 35,\n    width: styleSchema.dimension.FILL_ALL_WIDTH,\n  },\n  PrimaryButton: {\n    backgroundColor: styleSchema.color.primaryColor,\n  },\n\n  rootContainer: {\n    alignItems: \"center\",\n    display: \"flex\",\n    justifyContent: \"center\",\n  },\n};\n","import React from 'react';\nimport setRef from './setRef';\nexport default function useForkRef(refA, refB) {\n  /**\n   * This will create a new function if the ref props change and are defined.\n   * This means react will call the old forkRef with `null` and the new forkRef\n   * with the ref. Cleanup naturally emerges from this behavior\n   */\n  return React.useMemo(function () {\n    if (refA == null && refB == null) {\n      return null;\n    }\n\n    return function (refValue) {\n      setRef(refA, refValue);\n      setRef(refB, refValue);\n    };\n  }, [refA, refB]);\n}","import React, { Component } from \"react\";\nimport { styleSchema } from \"./stylesheet\";\n\nexport interface Props {\n  color?: \"primary\" | \"secondary\" | \"black\" | \"white\";\n  style?: any;\n}\n\nexport default class H1<ChildProps extends Props = Props> extends Component<\n  ChildProps\n> {\n  render() {\n    return (\n      <p\n        style={{\n          ...this.getDefaultStyle(),\n          ...this.getDefaultColor(),\n          ...this.props.style,\n        }}\n      >\n        {this.props.children}\n      </p>\n    );\n  }\n\n  protected getDefaultColor(): { color: string } {\n    return {\n      color: this.getColor(),\n    };\n  }\n\n  protected getColor(): string {\n    switch (this.props.color) {\n      case \"primary\":\n        return styles.primaryColor.color;\n      case \"secondary\":\n        return styles.secondaryColor.color;\n      case \"black\":\n        return styles.black.color;\n      case \"white\":\n        return styles.white.color;\n      default:\n        return styles.black.color;\n    }\n  }\n\n  protected getDefaultStyle() {\n    return { ...styles.defaultStyle, ...this.getStyle() };\n  }\n\n  protected getStyle(): any {\n    return styles.text;\n  }\n}\n\nconst styles = {\n  defaultStyle: {\n    margin: 0,\n  },\n  text: {\n    fontFamily: styleSchema.font.primaryFont,\n    fontSize: 18,\n    fontWeight: 600,\n  },\n  primaryColor: {\n    color: styleSchema.color.primaryColor,\n  },\n  secondaryColor: {\n    color: styleSchema.color.secondaryColor,\n  },\n  black: {\n    color: styleSchema.color.black,\n  },\n  white: {\n    color: styleSchema.color.white,\n  },\n};\n","// TODO: Make it private only in v5\nexport default function setRef(ref, value) {\n  if (typeof ref === 'function') {\n    ref(value);\n  } else if (ref) {\n    ref.current = value;\n  }\n}","import React from 'react';\nvar useEnhancedEffect = typeof window !== 'undefined' ? React.useLayoutEffect : React.useEffect;\n/**\n * https://github.com/facebook/react/issues/14099#issuecomment-440013892\n *\n * @param {function} fn\n */\n\nexport default function useEventCallback(fn) {\n  var ref = React.useRef(fn);\n  useEnhancedEffect(function () {\n    ref.current = fn;\n  });\n  return React.useCallback(function () {\n    return (0, ref.current).apply(void 0, arguments);\n  }, []);\n}"],"sourceRoot":""}